__list_nil{^} ({
    each{^} {
        {^f
            .
        }
    };

    assign {^} {
        {^value
            .
        }
    };

    {^msg
        ^msg[]
    }
}[]);

__bind __list_node __init {^self{^value
    ^self next (__cell[]);
    ^self value (__cell[]):
    ^self value {(^value)}
}};

__bind __list_node append {^self{^node
    ^self next {(^node)};
    ^node
}};

__bind __list_node each {^self{^f
    ^f (^self value{^});
    ^self next{^} each ^f
}};

__bind __list_node assign{^self{^values
    ^self value{^} := (^values value{^});
    ^self next{^} assign (^values next{^})
}};

__bind list __init {^self{^value
    ^self __head (__cell[]);
    ^self __tail (__cell[]);
    ^self __length (__cell[]);

    ^self __head {
        __new __list_node ^value
    };
    ^self __tail {
        (^self __head){^}
    };

    ^self __length { 1 }
}};

__bind list length {^self
    ^self __length {^}
};

__bind list , {^self{^value
    ^self __tail {
        (^self __tail{^} append (__new __list_node ^value))
    };

    (^self __length{
        (^self __length{^}) + 1
    });

    ^self
}};

__bind list ] {^self
    ^self
};

__bind list each {^self{^f
    ^self __head{^} each ^f;
    .
}};

__bind list := {^self{^values
    ^self __head{^} assign (^values __head{^});
    .
}};

__bind list render {^self{^out
    ^out `[`;
    (^self __head{^} value{^}) render ^out;
    ^self __head{^} next{^} each {^val
        ^out `, `;
        ^val render ^out
    };
    ^out `]`
}};

[{^} {^value
    __new list ^value
};

.
