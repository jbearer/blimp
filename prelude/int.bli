################################################################################
# int: a pure-bl:mp implementation of integer arithmetic
#
# Integers in this module are represented in tens complement, using lists of
# decimal digits, in order
# from the least significant digit (the ones digit) to the most significant
# digit, terminated by a sign bit.
#
# For example, we could represent the integer 42 as the list [2, 4, +], and -42
# as [8, 5, -], where
#   * the value of a list of tens complement digits is the sum of the values of
#     each digit
#   * a digit `d` in position `n` has the value +d*10^n
#   * a `+` is always the last digit, and has the value 0
#   * a `-` in position `n` is always the last digit, and has the value -10^n
#
# Digits are represented internally by the symbols __digit0 - __digit9. Lists of
# digits are represented as cons cells using the __dcons constructor, and they
# are terminated by either __dpos (+) or __dneg(-).
#
# The public interface of this module consists of the integer class, which wraps
# the cons lists described above in a user-friendly, vtable-based interface. We
# also provide global definitions of the symbols 0 - 9, which are bound to
# singleton lists of the corresponding digits.
#

################################################################################
# single-digit arithmetic
#

# __dpair: a pair of a carry digit and a result digit
__dpair{^} {^carry{^result
    carry{^} {(^carry)};
    result{^} {(^result)};

    {^msg
        ^msg[]
    }
}};

################################################################################
# single-digit addition tables
#
# The functions __add0 - __add9 can be used to add single digits together. For
# example, __add4 __digit2 represents the single-digit addition of 4 and 2. All
# of these functions return a __dpair, where the carry digit is at most 1.
#

__add0{^} {^digit
    # __digit0 + any digit is that digit.
    __dpair __digit0 ^digit
};

__add1{
    __digit0{^} {__dpair __digit0 __digit1};
    __digit1{^} {__dpair __digit0 __digit2};
    __digit2{^} {__dpair __digit0 __digit3};
    __digit3{^} {__dpair __digit0 __digit4};
    __digit4{^} {__dpair __digit0 __digit5};
    __digit5{^} {__dpair __digit0 __digit6};
    __digit6{^} {__dpair __digit0 __digit7};
    __digit7{^} {__dpair __digit0 __digit8};
    __digit8{^} {__dpair __digit0 __digit9};
    __digit9{^} {__dpair __digit1 __digit0};

    ^{^digit
        ^digit[]
    }
};

__add2{
    __digit0{^} {__dpair __digit0 __digit2};
    __digit1{^} {__dpair __digit0 __digit3};
    __digit2{^} {__dpair __digit0 __digit4};
    __digit3{^} {__dpair __digit0 __digit5};
    __digit4{^} {__dpair __digit0 __digit6};
    __digit5{^} {__dpair __digit0 __digit7};
    __digit6{^} {__dpair __digit0 __digit8};
    __digit7{^} {__dpair __digit0 __digit9};
    __digit8{^} {__dpair __digit1 __digit0};
    __digit9{^} {__dpair __digit1 __digit1};

    ^{^digit
        ^digit[]
    }
};

__add3{
    __digit0{^} {__dpair __digit0 __digit3};
    __digit1{^} {__dpair __digit0 __digit4};
    __digit2{^} {__dpair __digit0 __digit5};
    __digit3{^} {__dpair __digit0 __digit6};
    __digit4{^} {__dpair __digit0 __digit7};
    __digit5{^} {__dpair __digit0 __digit8};
    __digit6{^} {__dpair __digit0 __digit9};
    __digit7{^} {__dpair __digit1 __digit0};
    __digit8{^} {__dpair __digit1 __digit1};
    __digit9{^} {__dpair __digit1 __digit2};

    ^{^digit
        ^digit[]
    }
};

__add4{
    __digit0{^} {__dpair __digit0 __digit4};
    __digit1{^} {__dpair __digit0 __digit5};
    __digit2{^} {__dpair __digit0 __digit6};
    __digit3{^} {__dpair __digit0 __digit7};
    __digit4{^} {__dpair __digit0 __digit8};
    __digit5{^} {__dpair __digit0 __digit9};
    __digit6{^} {__dpair __digit1 __digit0};
    __digit7{^} {__dpair __digit1 __digit1};
    __digit8{^} {__dpair __digit1 __digit2};
    __digit9{^} {__dpair __digit1 __digit3};

    ^{^digit
        ^digit[]
    }
};

__add5{
    __digit0{^} {__dpair __digit0 __digit5};
    __digit1{^} {__dpair __digit0 __digit6};
    __digit2{^} {__dpair __digit0 __digit7};
    __digit3{^} {__dpair __digit0 __digit8};
    __digit4{^} {__dpair __digit0 __digit9};
    __digit5{^} {__dpair __digit1 __digit0};
    __digit6{^} {__dpair __digit1 __digit1};
    __digit7{^} {__dpair __digit1 __digit2};
    __digit8{^} {__dpair __digit1 __digit3};
    __digit9{^} {__dpair __digit1 __digit4};

    ^{^digit
        ^digit[]
    }
};

__add6{
    __digit0{^} {__dpair __digit0 __digit6};
    __digit1{^} {__dpair __digit0 __digit7};
    __digit2{^} {__dpair __digit0 __digit8};
    __digit3{^} {__dpair __digit0 __digit9};
    __digit4{^} {__dpair __digit1 __digit0};
    __digit5{^} {__dpair __digit1 __digit1};
    __digit6{^} {__dpair __digit1 __digit2};
    __digit7{^} {__dpair __digit1 __digit3};
    __digit8{^} {__dpair __digit1 __digit4};
    __digit9{^} {__dpair __digit1 __digit5};

    ^{^digit
        ^digit[]
    }
};

__add7{
    __digit0{^} {__dpair __digit0 __digit7};
    __digit1{^} {__dpair __digit0 __digit8};
    __digit2{^} {__dpair __digit0 __digit9};
    __digit3{^} {__dpair __digit1 __digit0};
    __digit4{^} {__dpair __digit1 __digit1};
    __digit5{^} {__dpair __digit1 __digit2};
    __digit6{^} {__dpair __digit1 __digit3};
    __digit7{^} {__dpair __digit1 __digit4};
    __digit8{^} {__dpair __digit1 __digit5};
    __digit9{^} {__dpair __digit1 __digit6};

    ^{^digit
        ^digit[]
    }
};

__add8{
    __digit0{^} {__dpair __digit0 __digit8};
    __digit1{^} {__dpair __digit0 __digit9};
    __digit2{^} {__dpair __digit1 __digit0};
    __digit3{^} {__dpair __digit1 __digit1};
    __digit4{^} {__dpair __digit1 __digit2};
    __digit5{^} {__dpair __digit1 __digit3};
    __digit6{^} {__dpair __digit1 __digit4};
    __digit7{^} {__dpair __digit1 __digit5};
    __digit8{^} {__dpair __digit1 __digit6};
    __digit9{^} {__dpair __digit1 __digit7};

    ^{^digit
        ^digit[]
    }
};

__add9{
    __digit0{^} {__dpair __digit0 __digit9};
    __digit1{^} {__dpair __digit1 __digit0};
    __digit2{^} {__dpair __digit1 __digit1};
    __digit3{^} {__dpair __digit1 __digit2};
    __digit4{^} {__dpair __digit1 __digit3};
    __digit5{^} {__dpair __digit1 __digit4};
    __digit6{^} {__dpair __digit1 __digit5};
    __digit7{^} {__dpair __digit1 __digit6};
    __digit8{^} {__dpair __digit1 __digit7};
    __digit9{^} {__dpair __digit1 __digit8};

    ^{^digit
        ^digit[]
    }
};

################################################################################
# single-digit API
#

__add_digits{
    # Lookup table for the appropriate __add* function based on the first digit.
    __digit0{^} __add0;
    __digit1{^} __add1;
    __digit2{^} __add2;
    __digit3{^} __add3;
    __digit4{^} __add4;
    __digit5{^} __add5;
    __digit6{^} __add6;
    __digit7{^} __add7;
    __digit8{^} __add8;
    __digit9{^} __add9;

    ^{^d1{^d2
        # Look up the __add function for the first digit and pass it the second
        # digit.
        ^d1 ^d2
    }}
};

# Compute the sum of two digits and a carry digit. The carry digit must be
# __digit0 or __digit1. The result is a __dpair where the carry digit is at most
# 1.
__add_digits_with_carry{^} {^d1{^d2{^c
    # Add the two digits, obtaining a __dpair.
    {^d12
        # Add the carry digit to the result of the d12 __dpair.
        {^result
            __dpair (__add_digits (^d12 carry) (^result carry) result)
                        # The final carry is the sum of the two carries.
                        #
                        # Note that at most one of (^d12 carry) and (^result
                        # carry) is 1, and the other is 0: if there was a carry
                        # from the addition of d1 and d2, then the result of
                        # that addition was at most 8, because we cannot add two
                        # digits to get 19. Therefore, even if ^c is 1, adding
                        # ^c to that result cannot produce a second carry.
                        #
                        # It follows that the sum of the two carries is at most
                        # 2, so we can ignore the carry of this addition, and we
                        # also preserve the invariant that our carry digit is
                        # never more than 1.
                    (^result result)
                        # The final result is the result of the second addition.
        } (__add_digits ^c (^d12 result))
    } (__add_digits ^d1 ^d2)
}}};

# Compute the 10s complement of a digit.
__digit_complement{
    __digit0{^} {__digit9};
    __digit1{^} {__digit8};
    __digit2{^} {__digit7};
    __digit3{^} {__digit6};
    __digit4{^} {__digit5};
    __digit5{^} {__digit4};
    __digit6{^} {__digit3};
    __digit7{^} {__digit2};
    __digit8{^} {__digit1};
    __digit9{^} {__digit0};

    ^{^d
        ^d[]
    }
};

# Single-digit equality: returns `true` or `false`.
__digit_equals{^} {^d1{^d2
    {
        (^d1{^} {true});
        ^d2{
            false
        }
    }[]
}};

# Get a symbol representing a digit, suitable for pretty-printing. E.g.
# `__digit_symbol __digit0` is 0`, `__digit_symbol __digit1` is 1, etc.
__digit_symbol{
    __digit0{^} {0};
    __digit1{^} {1};
    __digit2{^} {2};
    __digit3{^} {3};
    __digit4{^} {4};
    __digit5{^} {5};
    __digit6{^} {6};
    __digit7{^} {7};
    __digit8{^} {8};
    __digit9{^} {9};

    ^{^d
        ^d[]
    }
};

# Execute a block a number of times determined by a digit.
__digit_times{
    __digit0{^} {^f .};
    __digit1{^} {^f ^f[]};
    __digit2{^} {^f ^f[]; ^f[]};
    __digit3{^} {^f ^f[]; ^f[]; ^f[]};
    __digit4{^} {^f ^f[]; ^f[]; ^f[]; ^f[]};
    __digit5{^} {^f ^f[]; ^f[]; ^f[]; ^f[]; ^f[]};
    __digit6{^} {^f ^f[]; ^f[]; ^f[]; ^f[]; ^f[]; ^f[]};
    __digit7{^} {^f ^f[]; ^f[]; ^f[]; ^f[]; ^f[]; ^f[]; ^f[]};
    __digit8{^} {^f ^f[]; ^f[]; ^f[]; ^f[]; ^f[]; ^f[]; ^f[]; ^f[]};
    __digit9{^} {^f ^f[]; ^f[]; ^f[]; ^f[]; ^f[]; ^f[]; ^f[]; ^f[]; ^f[]};

    ^{^d{^f
        ^d ^f
    }}
};

################################################################################
# multi-digit arithmetic
#
# The digit-list protocol: there are three kinds of digit-list objects: __dneg,
# __dpos, and __dcons. All of them implement the following methods:
#
#   * lsd:
#       Return the least significant digit in the represented number (the
#       residue modulo 10)
#   * tail:
#       Return a digit list of all the digits except the least significant.
#       this is like dividing by 10 and dropping the remainder.
#   * negative:
#       Return `true` if the number is negative, `false` otherwise.
#   * equals ^y:
#       Return `true` if the receiver and ^y represent the same number, `false`
#       otherwise.
#   * __render ^out:
#       Print the represented number to the output stream ^out.
#   * case ^n ^p ^c
#       Execute the block ^n if the receiver is __dneg, execute ^p if the
#       receiver is __dpos, and execute ^c if the receiver is __dcons.
#   * add_with_carry ^complement ^y ^c
#       Add the digit-list ^y and the carry digit ^c (which must be 0 or 1) to
#       the receiving digit-list, returning a new digit-list. If ^complement is
#       `true`, digits in the receiver are complemented before adding. This can
#       be used to implement subtraction as well as addition. In particular,
#           x + y ::= x add_with_carry false y __digit0
#           x - y ::= y add_with_carry true  y __digit1
#       using the principle of tens complement arithmetic that
#           -y = ~y + 1
#
# In addition:
#   * __dneg and __dpos implement `snoc ^digit`, where `terminator snoc digit`
#     is equivalent to `__dcons digit terminator`, but `__dneg snoc` collapses
#     leading 9s (since [__dneg, 9, ...] is equivalent to [__dneg, ...]), and
#     `__dpos snoc` collapses leading 0s (since [__dpos, 0, ...]) is equivalent
#     to [__dpos, ...]. These methods in turn are used to implement the function
#     __make_dcons, which is like the __dcons constructor but collapses
#     redundant leading digits.
#   * __dpos and __dcons implement `times ^f`, which execute the block ^f a
#     number of times equivalent to the represented number.
#

__dneg{
    # __dneg is equivalent to (__dcons __digit9 __dneg), because __dneg in
    # position `n` has the value -10^n, while __digit9 in position `n` has the
    # value `9*10^n, and __dneg in position `n + 1` has the value `-10^(n+1)`,
    # and `-10^n = -10^(n+1) + 9*10^n` for all `n`. Therefore, if we have to
    # break a __dneg into a least significant digit and a tail, they are 9 and
    # __dneg, respectively.
    lsd{^} {__digit9};
    tail{^} {__dneg};

    case{^} {
        {^dneg{^dpos{^dcons
            ^dneg[]
        }}}
    };

    negative{^} {
        true
    };

    add_with_carry {
        # If we get here, we've reached the end of the first digit-list in an
        # add_with_carry operation, but the second might still have more digits
        # to process.
        #
        # As an optimization, we will short-circuit here if we can determine the
        # result without traversing the second list. This is the case if the
        # carry digit is 1: when we add the carry digit and this __dneg (which
        # is worth -1 in the same decimal position) they cancel out, leaving
        # only the second digit-list as the result.
        __digit1{^} {^y
            ^y
        };

        # In the general case, we have to look at the second digit-list, because
        # we may have to traverse it arbitrarily deep to propagate the carry all
        # the way to the end. We will case split on the second list, because if
        # it is a list terminator (__dneg or __dpos) then we have reached a base
        # case and must produce a result without evaluating deeper. Otherwise,
        # we will exploit commutativity of addition to recurse down the second
        # list using the __dcons implementation of add_with_carry.
        __digit0{^} {^y
            ^y case {
                # If ^y is __dneg, then this whole operation boils down to
                # __dneg + __dneg (since we already know the carry is 0). If we
                # think of __dneg as representing a -1, then the result is -2,
                # which we can represent as:
                __dcons __digit8 __dneg
                # since -2 = -1*10 + 2*1.
            } {
                # If ^y is __dpos, then the operation boils down to __dneg +
                # __dpos, which is __dneg since __dpos has a value of 0.
                __dneg
            } {
                # Otherwise, we have to traverse the second digit-list. Switch
                # the order of the operands so we can recurse down the __dcons
                # version of add_with_carry.
                (^y add_with_carry false __dneg)
            }
        };

        ^ {
            {^complement{^y{^c
                ^complement if_true {
                    # If we're complementing, then call __dpos add_with_carry,
                    # since the complement of __dneg is __dpos.
                    __dpos add_with_carry false ^y ^c
                } {
                    # Otherwise, dispatch on the carry.
                    (^c ^y)
                }
            }}}
        }
    };

    equals{^} {
        {^x
            ^x case {
                true
            } {
                false
            } {
                false
            }
        }
    };

    snoc {
        # If the digit we're appending is 9, collapse [9, __dneg] into just
        # [__dneg]. Otherwise create a new cons cell.
        __digit0{^} {__dcons __digit0 __dneg};
        __digit1{^} {__dcons __digit1 __dneg};
        __digit2{^} {__dcons __digit2 __dneg};
        __digit3{^} {__dcons __digit3 __dneg};
        __digit4{^} {__dcons __digit4 __dneg};
        __digit5{^} {__dcons __digit5 __dneg};
        __digit6{^} {__dcons __digit6 __dneg};
        __digit7{^} {__dcons __digit7 __dneg};
        __digit8{^} {__dcons __digit8 __dneg};
        __digit9{^} {__dneg};

        ^{
            {^digit
                ^digit[]
            }
        }
    };

    __render {^} {
        {^out
            ^out `-`
        }
    };

    ^{^msg
        ^msg[]
    }
};

__dpos{
    # __pos is equivalent to (__dcons __digit0 __dpos), because __dpos has a
    # value of 0.
    lsd{^} {__digit0};
    tail{^} {__dpos};

    case{^} {
        {^dneg{^dpos{^dcons
            ^dpos[]
        }}}
    };

    negative{^} {
        false
    };

    add_with_carry {
        # If we get here, we've reached the end of the first digit-list in an
        # add_with_carry operation, but the second might still have more digits
        # to process.
        #
        # As an optimization, we will short-circuit here if we can determine the
        # result without traversing the second list. This is the case if the
        # carry digit is 0: when we add the carry digit and this __dpos (which
        # is also worth 0) we get 0, leaving only the second digit-list as the
        # result.
        __digit0{^} {^y
            ^y
        };

        # In the general case, we have to look at the second digit-list, because
        # we may have to traverse it arbitrarily deep to propagate the carry all
        # the way to the end. We will case split on the second list, because if
        # it is a list terminator (__dneg or __dpos) then we have reached a base
        # case and must produce a result without evaluating deeper. Otherwise,
        # we will exploit commutativity of addition to recurse down the second
        # list using the __dcons implementation of add_with_carry.
        __digit1{^} {^y
            ^y case {
                # If ^y is __dneg, then this whole operation boils down to
                # __dpos + __dneg + 1 (since we already know the carry is 1). If
                # we think of __dpos as representing a 0 and __dneg as
                # representing a -1, then the result is 0
                __dpos
            } {
                # If ^y is __dpos, then the operation boils down to __dpos +
                # __dpos + 1, which is 1 since __dpos has a value of 0.
                __dcons __digit1 __dpos
            } {
                # Otherwise, we have to traverse the second digit-list. Switch
                # the order of the operands so we can recurse down the __dcons
                # version of add_with_carry.
                (^y add_with_carry false __dpos __digit1)
            }
        };


        ^ {
            {^complement{^y{^c
                ^complement if_true {
                    # If we're complementing, then call __dneg add_with_carry,
                    # since the complement of __dpos is __dneg.
                    __dneg add_with_carry false ^y ^c
                } {
                    # Otherwise, dispatch on the carry.
                    (^c ^y)
                }
            }}}
        }
    };

    equals{^} {
        {^x
            ^x case {
                false
            } {
                true
            } {
                false
            }
        }
    };

    snoc {
        # If the digit we're appending is 0, collapse [0, __dpos] into just
        # [__dpos]. Otherwise create a new cons cell.
        __digit0{^} {__dpos};
        __digit1{^} {__dcons __digit1 __dpos};
        __digit2{^} {__dcons __digit2 __dpos};
        __digit3{^} {__dcons __digit3 __dpos};
        __digit4{^} {__dcons __digit4 __dpos};
        __digit5{^} {__dcons __digit5 __dpos};
        __digit6{^} {__dcons __digit6 __dpos};
        __digit7{^} {__dcons __digit7 __dpos};
        __digit8{^} {__dcons __digit8 __dpos};
        __digit9{^} {__dcons __digit9 __dpos};

        ^{
            {^digit
                ^digit[]
            }
        }
    };

    times{^} {
        {^f
            .
        }
    };

    __render {^} {
        {^out
            .
        }
    };

    ^{^msg
        ^msg[]
    }
};

__dcons{^} {^lsd{^tail
    lsd{^} {(^lsd)};
    tail{^} {(^tail)};

    case{^} {
        {^dneg{^dpos{^dcons
            ^dcons[]
        }}}
    };

    negative{^} {
        (^tail negative)
            # The sign is determined by the terminator (whether it is __dpos or
            # __dneg) so just recurse down the tail until we get there.
    };

    add_with_carry{^} {
        {^complement{^y{^c
            # Take the complement of the LSD if requested.
            {^lsd
                # Add the least significant digits along with the carry,
                # obtaining a result (which is the final LSD) and a new carry
                # (which is either 0 or 1).
                {^lsd_sum
                    __make_dcons
                        (^lsd_sum result)
                        (^tail add_with_carry ^complement (^y tail) (^lsd_sum carry))
                            # Recursively add the tails along with the new
                            # carry.
                } (__add_digits_with_carry ^lsd (^y lsd) ^c)
            } (^complement if_true {__digit_complement ^lsd} {(^lsd)})
        }}}
    };

    equals{^} {
        {^y
            (__digit_equals ^lsd (^y lsd)) and (^tail equals (^y tail))
                # Since we do not allow leading zeros, two integers are equal if
                # and only if they have the same digits, so we compare the least
                # significant digits and compare the remaining digits
                # recursively.
        }
    };

    times{^} {
        {^f
            __digit_times ^lsd ^f;
                # Do the action `d` times for a ones digit of `d`.

            # Run `f` 10 times the the number represented by the tail times,
            # since getting the tail is like dividing by 10.
            ^tail times {
                (^f[]);
                (^f[]);
                (^f[]);
                (^f[]);
                (^f[]);
                (^f[]);
                (^f[]);
                (^f[]);
                (^f[]);
                (^f[])
            }
        }
    };

    __render{^} {
        {^out
            # The list of digits is stored backwards, with the least-significant
            # digit first. So we render it in reverse order, by rendering the
            # tail first:
            (^tail __render ^out);

            # And then rendering the least-significant digit.
            ^out (__digit_symbol ^lsd)
        }
    };

    {^msg
        ^msg[]
    }
}};

__make_dcons{^} {^h{^t
    ^t case {
        (^t snoc ^h)
    } {
        (^t snoc ^h)
    } {
        __dcons ^h ^t
    }
}};

################################################################################
# integer: a wrapper class which presents a vtable-based interface to integers
#

__bind integer __digits {^x
    ^x
};

__bind integer + {^x{^y
    __wrap integer (^x add_with_carry false (^y __digits) __digit0)
}};

__bind integer - {^x{^y
    # We compute ^x - ^y as
    #       ^x + (-^y)
    #     = ^x + (~^y + 1)
    #     = ~^y + ^x + 1
    # using the complement feature of the add_with_carry method.
    __wrap integer ((^y __digits) add_with_carry true ^x __digit1)
}};

__bind integer == {^x{^y
    ^x equals (^y __digits)
}};

__bind integer times {^x{^f
    unless (^x negative) {
        (^x times ^f)
    }
}};

__bind integer render {^x{^out
    ^x case {
        # If ^x is -1, it is represented as a single __dneg, which would render
        # incorrectly as `-`, so we handle this case specially.
        (^out `-1`)
    } {
        # If ^x is 0, it is represented as a single __dpos, which would render
        # incorrectly as nothing, so we handle this case specially.
        (^out `0`)
    } {
        # A simple way of converting from a 10s complement representation to a
        # normal decimal representation is to get the sign and the absolute
        # value in two separate steps.
        if (^x negative) {
            (^out `-`); (0 - (__wrap integer ^x)) render ^out
        } else {
            (^x __render ^out)
        }
    }
}};

__operator -;
-{^} {^x
    0 - ^x
};

################################################################################
# globally bound names for small integers
#

0{^} (__wrap integer (__dpos));
1{^} (__wrap integer (__dcons __digit1 __dpos));
2{^} (__wrap integer (__dcons __digit2 __dpos));
3{^} (__wrap integer (__dcons __digit3 __dpos));
4{^} (__wrap integer (__dcons __digit4 __dpos));
5{^} (__wrap integer (__dcons __digit5 __dpos));
6{^} (__wrap integer (__dcons __digit6 __dpos));
7{^} (__wrap integer (__dcons __digit7 __dpos));
8{^} (__wrap integer (__dcons __digit8 __dpos));
9{^} (__wrap integer (__dcons __digit9 __dpos));

.
