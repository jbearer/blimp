################################################################################
# Parse tree data structures
#
# A parse tree is conceptually a pair of
#   * a grammar symbol, which is an object (usually, but not always, a symbol)
#     identifying the terminal or non-terminal matching that parse tree
#   * a possibly-empty list of sub-trees
#
# We represent parse trees as a struct owning a linked list of sub-trees. The
# linked list is implemented using a __parse_tree_node data structure, which
# wraps a sub-tree and a pointer to the next node.
#

!(

###################
# __parse_tree_nil
#

# __parse_tree_nil implements the __parse_tree_node interface, but it is a
# singleton representing the empty list.
__parse_tree_nil{^} ({
    each{^} {
        {^f
            .
        }
    };

    if_nil{^} {
        {^t{^f
            ^t[]
        }}
    };

    equals{^} {
        {^other
            ^other if_nil {
                true
            } {
                false
            }
        }
    };

    {^msg
        ^msg[]
    }
}[]);

#####################
# __parse_tree_node
#

__bind __parse_tree_node __init {^self{^tree
    ^self tree (^tree);
    ^self next (__cell[]);
    ^self next{__parse_tree_nil}
}};

__bind __parse_tree_node each {^self{^f
    ^f (^self tree);
    ^self next{^} each ^f
}};

__bind __parse_tree_node if_nil {^self{^t{^f
    ^f[]
}}};

__bind __parse_tree_node equals {^self{^other
    (^other if_nil) {
        false
    } {
        (^self tree) == (^other tree) if_true {
            (^self next{^}) equals (^other next{^})
        } {
            false
        }
    }
}};

###############
# __parse_tree
#

__bind parse_tree __init {^self{^sym
    ^self symbol ^sym;
    ^self _reparse_symbol (__cell[]);
    ^self _reparse_symbol {(^sym)};

    ^self _head (__cell[]);
    ^self _head {__parse_tree_nil};

    ^self _tail (__cell[]);
    ^self _tail {__parse_Tree_nil};

    .
}};

# When encountering this tree as an immediate child of a parse tree being
# reparsed (see `parse_tree:reparsed`), treat this tree as if it had the grammar
# symbol ^sym. The actual structure of this tree is unchanged.
__bind parse_tree reparse_as {^self{^sym
    ^self _reparse_symbol {(^sym)};
    ^self
}};

__bind parse_tree == {^self{^other
    __call {
        (^self symbol) == (^other symbol) if_true {
            (^self _head{^}) equals (^other _head{^})
        } {
            false
        }
    }
}};

__bind parse_tree each {^self{^f
    ^self _head{^} each ^f
}};

__bind parse_tree first {^self
    ^self _head{^} tree
};

__bind parse_tree is_terminal {^self
    # By definition, a tree represents a terminal if and only if it has no
    # sub-trees.
    ^self _head{^} if_nil {
        true
    } {
        false
    }
};

__bind parse_tree push {^self{^tree
    # Create a new, isolated list node representing ^tree, and call it ^node.
    {^node
        # Append the node to the linked list.
        ^self _tail{^} if_nil {
            (^self) _head{(^node)};
            (^self) _tail{(^node)}
        } {
            (^self) _tail{^} next {(^node)};
            (^self) _tail{(^node)}
        }
    } (__new __parse_tree_node ^tree);

    ^self
}};

# Create a new parse tree which is like this one, but the immediate children
# (and potentially the symbol) have been modified by applying the parser with
# this tree's symbol as a goal.
__bind parse_tree reparsed {^self
    __parse_tree_from_inner (parse (^self __inner))
};

__bind parse_tree clone {^self
    __parse_tree_from_inner (^self __inner)
};

# Append all the children of another parse tree to this tree, modifying in place
# and returning this tree. The other parse tree is unchanged.
__bind parse_tree += {^self{^other
    ^other each {^sub_tree
        ^self push (^sub_tree clone)
    };
    ^self
}};

# Return a new parse tree which has the same symbol as this one, but whose
# immediate children are the concatenation of this tree's children with another
# tree's children. Neither of the input trees are modified.
__bind parse_tree + {^self{^other
    ^self clone += ^other
}};

__bind parse_tree render {^self{^out
    ^out `[` (^self symbol) `|`;
    ^self each {^sub_tree
        ^sub_tree render ^out
    };
    ^out `|]`
}};

# Create an object implementing the low-level parse tree protocol understood by
# the built-in macro construct, representing the same tree as this parse tree.
__bind parse_tree __inner {^self
    {^out
        ^self each {^sub_tree
            ^out (^sub_tree __inner)
        };
        ^self symbol
    }
};

# Construct a high-level parse_tree instance from an object implementing the
# low-level parse tree protocol.
__parse_tree_from_inner{^} {^t
    {^builder
        ^builder symbol (
            ^t {^sub_tree
                ^builder push (__parse_tree_from_inner ^sub_tree)
            }
        ) build
    } (__new parse_tree_builder . raw)
};

#######################
# __parse_tree_builder
#
# Convenient method chaining based API for constructing parse trees.
#

__bind parse_tree_builder __init {^self{
    .
    ^self _symbol (__cell[]);
    ^self _head (__cell[]);
    ^self _tail (__cell[]);
    ^self _raw (__cell[]);

    ^self _head {__parse_tree_nil};
    ^self _tail {__parse_Tree_nil};
    ^self _raw {{^t{^f ^f[]}}};
    .
}};

# Set the gramamr symbol which will be attached to the resulting tree.
__bind parse_tree_builder symbol {^self{^sym
    ^self _symbol {(^sym)};
    ^self
}};

# Add a sub-tree to be appended to the resulting tree.
__bind parse_tree_builder push {^self{^child
    # Create a new, isolated list node representing ^child, and call it ^node.
    {^node
        # Append the node to the linked list.
        ^self _tail{^} if_nil {
            (^self) _head{(^node)};
            (^self) _tail{(^node)}
        } {
            (^self) _tail{^} next {(^node)};
            (^self) _tail{(^node)}
        }
    } (__new __parse_tree_node ^child);

    ^self
}};

# Construct a sub-tree to be appended to the resulting tree. The provided
# closure receives a fresh parse_tree_builder and modifies it until it
# represents the desired sub-tree. The resulting sub-tree will then be appended
# to the result of _this_ builder as if by `parse_tree_builder:push`.
#
# Note that the closure should not call `build` on the child builder.
__bind parse_tree_builder child {^self{^f
    ^self push (^f (__new parse_tree_builder .) build)
}};

# Add a terminal to be appended to the resulting tree. The provided object will
# be used as the symbol for a new terminal parse tree, which will be appended to
# the result of this builder as if by `parse_tree_builder:push`.
__bind parse_tree_builder terminal {^self{^t
    ^self push (__new parse_tree ^t)
}};

# Do not reparse the resulting tree when it is built.
__bind parse_tree_builder raw {^self
    ^self _raw {{^t{^f ^t[]}}};
    ^self
};

# Build and return the parse tree represented by this builder.
__bind parse_tree_builder build {^self
    {^tree
        ^tree _head{(^self _head{^})};
        ^tree _tail{(^self _tail{^})};
        ^self _raw{^} {
            (^tree)
        } {
            (^tree reparsed)
        }
    } (__new parse_tree (^self _symbol{^}))
};

.);

################################################################################
# QuasiQuote syntax for creating parse trees
#
# The expression [n|input to parser|] is a parse_tree representing the result of
# parsing the text "input to parser" as the non-terminal `n`. The non-terminal
# symbol is optional and defaults to 1, so [|input|] is the same as [1|input|].
#
# Expressions representing parse trees can be interpolated into the new parse
# tree using ${}, as in [|${recv} msg|], which is a parse tree representing the
# expression that sends `msg` to whatever expression is represented by the
# parse_tree `recv`.
#
# The QuasiQuote expression can be annotated with modifiers which control how
# the new parse tree is built. The syntax is
#       [mod1 mod2 modN:symbol|input|]
# or
#       [mod1 mod2 modN:|input|]
# A modifier is macro with the non-terminal `quasiquote_modifier` which expands
# to an object literal. The object literal must be a function that takes a
# `parse_tree_builder` and modifies it. Once a raw parse tree has been
# constructed based on a simple tokenization pass over the input, a builder is
# constructed representing the raw parse tree. That builder is then passed to
# each modifier in the order in which they were specified, and finally
# `parse_tree_builder:build` is called to get the resulting parse tree.
#

!(
# A non-terminal which just reduces symbols. This is just because it's slightly
# nicer to write {symbol} than `\`sym\``.
\> {^{`\`sym\``}; symbol} {^toks
    {
        sym{^ ^};
        ^toks{^sym
            sym{(^sym)}
        };
        sym[]
    }[]
};


# Literal terms (which we convert to terminal parse trees).
\> {^{^{``}; symbol}; term}  {^toks
    {
        sym{^ ^};
        ^toks{^tok
            sym{(^tok)}
        };
        parse {^ {`(`} {`__new`} {`parse_tree`} (sym[]) {`)`}; 6}
    }[]
};

# For commonly used tokens which cannot be lexed as symbols even in a context
# where a symbol is the only expected token, we define rules that accept that
# token and convert it to a terminal parse tree.
#
# This is only necessary due to current limitations of the lexer. The lexer
# should be made extensible from bl:mp or at least given better defaults, after
# which time we should be able to achieve this in a much more general way.
\> {^{`(`}; term}  {^toks
    parse {^ {`(`} {`__new`} {`parse_tree`} {^{`(`}; 7} {`)`}; 6}
};
\> {^{`)`}; term}  {^toks
    parse {^ {`(`} {`__new`} {`parse_tree`} {^{`)`}; 7} {`)`}; 6}
};
\> {^{`{`}; term}  {^toks
    parse {^ {`(`} {`__new`} {`parse_tree`} {^{`{`}; 7} {`)`}; 6}
};
\> {^{`}`}; term}  {^toks
    parse {^ {`(`} {`__new`} {`parse_tree`} {^{`}`}; 7} {`)`}; 6}
};
\> {^{`!`}; term}  {^toks
    parse {^ {`(`} {`__new`} {`parse_tree`} {^{`!`}; 7} {`)`}; 6}
};

# Interpolated expressions as terms representing sub-trees.
\> {^{`$`} {`{`} {^{``}; 1} {`}`}; term} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        term{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    # $
                    n_ref _1
                }}};
                _1{^{{
                    # {
                    n_ref _2
                }}};
                _2{^{{
                    term{(^tok)};
                    n_ref _3
                }}};
                _3{^{{
                    # }
                    n_ref _4
                }}};
                n[] []
            }[]
        };

        term[]
    }[]
};

\> {^{^{``}; term}; terms} {^};

\> {^{^{``}; term} {^{``}; terms}; terms} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        head{^ ^};
        tail{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    head {(^tok)};
                    n_ref _1
                }}};
                _1{^{{
                    tail {(^tok)};
                    n_ref _2
                }}};
                n[] []
            }[]
        };

        {
            ^(head[]);
            (tail[])^;
            terms
        }
    }[]
};

# A QuasiQuote modifier which prevents the raw parse tree from being reparsed
# when it is created.
\> {^{`raw`}; quasiquote_modifier} {{{^builder
    ^builder raw
}}};

\> {^{`:`}; quasiquote_modifiers} {{quasiquote_modifiers}};
\> {^
    {^{``}; quasiquote_modifier}
    {^{``}; quasiquote_modifiers}
    ; quasiquote_modifiers} {^toks

    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        head{^ ^};
        tail{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    head{(^tok)};
                    n_ref _1
                }}};
                _1{^{{
                    tail{(^tok)};
                    n_ref _2
                }}};

                n[] []
            }[]
        };

        {
            ^(head[]);
            (tail[])^;
            quasiquote_modifiers
        }
    }[]
};

# The basic quasiquote syntax.
\> {^
    {`[`}
    {^{``}; quasiquote_modifiers}   # Modifiers
    {^{``}; 7}                      # Grammar symbol
    {`|`}
    {^{``}; terms}                  # Parser input
    {`|]`};
    7
} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        mods{^ ^};
        nt{^ ^};
        terms{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    # [
                    n_ref _1
                }}};
                _1{^{{
                    mods{(^tok)};
                    n_ref _2
                }}};
                _2{^{{
                    nt {(^tok)};
                    n_ref _3
                }}};
                _3{^{{
                    # |
                    n_ref _4
                }}};
                _4{^{{
                    terms {(^tok)};
                    n_ref _5
                }}};
                _5{^{{
                    # |]
                    n_ref _6
                }}};

                n[] []
            }[]
        };

        parse {^out
            # Create a local closure which will take the builder (to be
            # constructed syntactically later, as a message to the closure) and
            # apply each modifier to it, in order.
            ^{`{`} {`^t`};
                mods[] {^mod
                    ^out ^mod {`^t`} {`;`}
                };
                # Return a parse tree built with the modified builder.
                ^{`^t`} {`build`};
            ^{`}`};
            # Now construct the builder itself, as a message to the closure
            # above.
            ^{`(`} {`__new`} {`parse_tree_builder`} {`.`}
                {`symbol`} (nt[]);
                (terms[]) {^term
                    ^out {`push`} {(^term) ^; 7}
                };
            ^{`)`};
            3
        }
    }[]
};

# Without modifiers
\> {^{`[`} {^{``}; 7} {`|`} {^{``}; terms} {`|]`}; 7} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        nt{^ ^};
        terms{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    # [
                    n_ref _1
                }}};
                _1{^{{
                    nt {(^tok)};
                    n_ref _2
                }}};
                _2{^{{
                    # |
                    n_ref _3
                }}};
                _3{^{{
                    terms {(^tok)};
                    n_ref _4
                }}};
                _4{^{{
                    # |]
                    n_ref _5
                }}};

                n[] []
            }[]
        };

        # Delegate to the modifier form with an empty list of modifiers.
        parse {^{`[`} {`:`} (nt[]) {`|`} (terms[]) {`|]`}; 7}
    }[]
};

# `terms` is always non-empty, so we define a separate production for an empty
# parse tree.
\> {^{`[`} {^{``}; 7} {`|`} {`|]`}; 7} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        nt{^ ^};
        terms{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    # [
                    n_ref _1
                }}};
                _1{^{{
                    nt {(^tok)};
                    n_ref _2
                }}};
                _2{^{{
                    # |
                    n_ref _3
                }}};
                _3{^{{
                    # |]
                    n_ref _4
                }}};

                n[] []
            }[]
        };

        parse {^{`__new`} {`parse_tree`} (nt[]); 3}
    }[]
};

# If no non-terminal symbol is given, default to 1.
\> {^{`[|`} {^{``}; terms} {`|]`}; 7} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        nt{^ ^};
        terms{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    # [|
                    n_ref _1
                }}};
                _1{^{{
                    terms {(^tok)};
                    n_ref _2
                }}};
                _2{^{{
                    # |]
                    n_ref _3
                }}};

                n[] []
            }[]
        };

        # Delegate to the explicit-symbol form with a non-terminal `1`.
        parse {
            ^{`[`} {`1`} {`|`} (terms[]) {`|]`};
            7
        }
    }[]
};

# No non-terminal, but with modifiers.
\> {^{`[`} {^{``}; quasiquote_modifiers} {`|`} {^{``}; terms} {`|]`}; 7} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        mods{^ ^};
        terms{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    # [
                    n_ref _1
                }}};
                _1{^{{
                    mods{(^tok)};
                    n_ref _2
                }}};
                _2{^{{
                    # |
                    n_ref _3
                }}};
                _3{^{{
                    terms {(^tok)};
                    n_ref _4
                }}};
                _4{^{{
                    # |]
                    n_ref _5
                }}};

                n[] []
            }[]
        };

        parse {
            ^{`[`} (mods[]) {`1`} {`|`} (terms[]) {`|]`};
            7
        }
    }[]
};

.);

################################################################################
# grammar_symbol
#
# Here we define a grammar for symbols which can appear in the production
# portion of a macro definition. These are either terminals (which are just
# symbols) or non-terminals (the symbol naming the non-terminal, enclosed in
# <>).
#

!(

# Terminal symbols.
\> {^{^{``}; symbol}; grammar_symbol}  {^toks
    {^ {`{`} ^toks {`}`}; 6}
};

# Non-terminal symbols.
\> {^ {<} {^{``}; symbol} {>}; grammar_symbol} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        nt{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    # <
                    n_ref _1
                }}};
                _1{^{{
                    nt{(^tok)};
                    n_ref _2
                }}};
                _2{^{{
                    # >
                    n_ref _3
                }}};

                n[] []
            }[]
        };

        # Return a parse tree object with the given non-terminal; that is, a
        # block with a single child and which returns the non-terminal. This is
        # how we represent non-terminals in low-level, built-in macro
        # definitions.
        parse {^ {`{`} {`^`} {`{`} {``} {`}`} {`;`} (nt[]) {`}`}; 6}
    }[]
};

.);

################################################################################
# pattern
#
# A pattern is a grammar_symbol with an optional name, written name@symbol. If
# provided, the name will be bound to the sub-parse-tree matched by the symbol
# in the macro handler.
#
# If no name is given in the pattern, the `name` field in the result will be
# `_`.
#

!(

# No-name patterns.
\> {^{^{``}; grammar_symbol}; pattern} {^toks
    {
        sym{^ ^};
        ^toks {^tok
            sym{(^tok)}
        };
        {^{_} (sym[]); pattern}
    }[]
};

# Named patterns.
\> {^{^{``}; symbol} {`@`} {^{``}; grammar_symbol}; pattern} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        binder{^ ^};
        symbol{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    binder {(^tok)};
                    n_ref _1
                }}};
                _1{^{{
                    # @
                    n_ref _2
                }}};
                _2{^{{
                    symbol {(^tok)};
                    n_ref _3
                }}};
                n[] []
            }[]
        };

        {^(binder[]) (symbol[]); pattern}
    }[]
};

\> {^{^{``}; pattern}; patterns} {^};
\> {^{^{``}; pattern} {^{``}; patterns}; patterns} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        head{^ ^};
        tail{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    head {(^tok)};
                    n_ref _1
                }}};
                _1{^{{
                    tail {(^tok)};
                    n_ref _2
                }}};
                n[] []
            }[]
        };

        {
            ^(head[]);
            (tail[])^;
            patterns
        }
    }[]
};

.);

################################################################################
# Macro definitions
#

!(

# Run-time functions used by macro handlers defined using `syntax`.
__pat_head{^} {^iter
    {
        __h{^ ^};
        ^iter { ^x
            __h {(^x)}
        };
        __h[]
    }[]
};

__pat_tail {^} {^iter {^visit
    n_ref{^ ^};
    n n_ref;
    n_ref _0;
    ^iter {^x
        {
            _0{^{{
                n_ref _1
            }}} ;
            _1{^{{
                (^visit ^x)
            }}};
            n[] []
        }[]
    }
}};

\> {^ {`syntax`} {`\`sym\``} {`->`} {^{``}; patterns} {`{`} {^{``}; 1} {`}`}; 3} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref _0;

        nt{^ ^};
        patterns{^ ^};
        handler{^ ^};
        ^toks {^tok
            {
                _0{^{{
                    # syntax
                    n_ref _1
                }}};
                _1{^{{
                    nt {(^tok)};
                    n_ref _2
                }}};
                _2{^{{
                    # ->
                    n_ref _3
                }}};
                _3{^{{
                    patterns {(^tok)};
                    n_ref _4
                }}};
                _4{^{{
                    # {
                    n_ref _5
                }}};
                _5{^{{
                    handler {(^tok)};
                    n_ref _6
                }}};
                _6{^{{
                    # }
                    n_ref _7
                }}};

                n[] []
            }[]
        };

        # Helper function for traversing the sequence of patterns from the macro
        # definition.
        visit_patterns{^} {^pats{^visit
            ^pats {^pat
                {
                    # The pattern itself is a sequence with two terms, the
                    # binder and the grammar symbol. Traverse the sequence to
                    # extract these terms and then pass them to the visitor.
                    n_ref _0;
                    binder{^ ^};
                    sym{^ ^};
                    ^pat {^sym
                        {
                            _0{^{{
                                binder{(^sym)};
                                n_ref _1
                            }}};
                            _1{^{{
                                sym{(^sym)};
                                n_ref _2
                            }}};
                            n[] []
                        }[]
                    };

                    ^visit(sym[])(binder[])
                }[]
            }
        }};

        # Helpers for generating code that traverses the ^toks argument to the
        # generated macro handler. Calling `next_tok` will return a parse tree
        # which, when evaluated, accesses the next parse tree in ^toks. It will
        # then advance curr_tok so that the next time `next_tok` is called, it
        # generates code for the following sub-tree.
        curr_tok_ref{^ ^};
        curr_tok curr_tok_ref;
        curr_tok_ref {{^{`^toks`}; 7}};
            # `curr_tok` should always represent the sequence of tokens not yet
            # visited. Initialize it to the whole sequence, and each time we
            # advance by one we will add an application of `__pat_tail` to
            # represent the next sub-tree.
        next_tok{^} {
            {^curr
                curr_tok_ref {{^ {`__pat_tail`} ^curr; 7}};
                {^ {`__pat_head`} ^curr; 1}
            } (curr_tok[])
        };

        parse {^out
            ^{`!`} {`(`} {`\\>`} {`{`};
                visit_patterns (patterns[]) {^sym{^binder
                    ^out {`^`} ^sym {`;`}
                }};
                ^(nt[]);
            ^{`}`};

            ^{`{`} {`^toks`};
                ^ {`{`};
                    ^ {`__call`} {`{`};
                        visit_patterns (patterns[]) {^sym{^binder
                            ^out ^binder {`:=`}
                                {`(`} {`__parse_tree_from_inner`}
                                    {`(`} (next_tok[]) {`)`}
                                    # The input tree might have come from a
                                    # macro expansion itself, in which case it
                                    # is possible that its grammar symbol does
                                    # not match the grammar symbol it is being
                                    # treated as by the parser (if the grammar
                                    # symbol of the parse tree returned by the
                                    # macro expansion does not match that of the
                                    # macro definition).
                                    #
                                    # Since the user declared this macro to take
                                    # in trees with specific non-terminals, they
                                    # expect to be able to use the input trees
                                    # in the output in positions where the
                                    # corresponding non-terminal is expected.
                                    # Therefore, we annotate each input tree
                                    # with the symbol with which it was declared
                                    # in the context of this macro definition.
                                    # If that input tree is encountered during
                                    # reparsing of the output of this macro, it
                                    # will be treated as if it had that grammar
                                    # symbol.
                                    {`reparse_as`} {`(`}
                                        ^sym {`{`} {`^`} {`}`}
                                    {`)`}
                                {`)`} {`;`}
                        }};
                        ^{`(`}(handler[]){`)`} {`__inner`};
                    ^{`}`};
                ^{`}`} {`[]`};
            ^{`}`} {`)`};

            1
        }
    }[]
};

.);

################################################################################
# Syntax for earlier modules, which are defined before this one because this
# module depends on them.
#

syntax 7 -> `$` lv@<6> {
    [3| ${$lv} __get |]
};

.
