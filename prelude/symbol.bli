################################################################################
# symbol classes
#
# The classes __global_symbol and __local_symbol represent symbols. Unlike
# actual symbols, instances of these classes are blocks with their own custom
# message handler, which allows them to dispatch methods received by the symbol
# object.
#
# The difference between these two classes is whether the symbol represented by
# an instance lives on the stack or in the global scope. This is determined by
# the ambient scope when the symbol is first used.
#
# Both classes can dispatch any message which is declared globally using __symop
# (see below) as well as one special message __sym_cell, which returns a cell
# containing the value of the symbol in the appropriate scope.
#
# Since __local_symbol represents a symbol whose value lives elsewhere (on the
# stack) the only piece of state it needs to do its job is the name of the
# symbol, which it can use to get the value of the symbol from the stack.
# Therefore, __local_symbol can be implemented as a wrapper class: instances
# should be created using `__wrap __local_symbol symbol`, and methods will
# receive the symbol as their implicit first argument.
#
# __global_symbol, on the other hand, actually stores a cell containing its
# value in its scope. Since it needs to maintain this additional per-instance
# state, __global_symbol instances should be standard instances: `__new
# __global_symbol symbol`. Methods will receive a reference to the
# __global_symbol object as their implicit first argument. The name of the
# symbol can be recovered using the method __sym.
#

__bind __global_symbol __init {^self{^sym
    ^self __sym_cell (__cell[]);
    ^self __sym ^sym
}};

__bind __local_symbol __sym_cell {^sym
    __stack ^sym
};

################################################################################
# symbol operations
#
# Symbols should be able to receive certain operators as messages, e.g. := and
# ==. Upon receiving these operators, we should execute user- (or library-)
# written code. This is not so easy, because the symbol message handler is built
# into the language; it is beyond our control.
#
# Fortunately, the built-in symbol method handler does allow for custom code to
# be executed, because whenever a symbol receives a message where it is not in
# scope, it passes a reference to itself to the message it received, causing
# that message (which can be a block) to execute its own message handler. To
# create a symbol operator which exploits this, we bind an operator handler to
# the name of the operator in the global scope. When an uninitialized symbol
# receives an operator, it passes a reference to itself to the operator handler.
# When the operator handler receives a reference to a symbol, it passes the
# symbol to the code block which implements the operator, and it also uses the
# reference to initialize the symbol to a symbol object. Thereafter, when the
# symbol receives an operator, it will be forwarded to the symbol object, which
# will manually invoke the code block for the operator.
#
# In this module, we define an operator __symop which can be used to declare new
# symbol operators, like so:
#
#   my_op __symop {...};
#
# Now the expression `my_sym my_op` will cause `my_sym` to be passed to the
# block which was bound to `my_op` using __symop.
#
# Note that __symop introduces the receiving symbol into the global scope. This
# will interfere with virtual dispatch for methods whose name matches the
# symbol, unless the symbol is first declared `__operator`. Therefore, the
# preferred idiom is
#
#   __operator my_op __symop {...};
#
# This module also provides several built-in symbol operators, including := for
# assignment and == for equality.
#

__symop{^} {^opref{^code
    # When we initialize the operator using ^opref below, the result is the
    # operator symbol, which we capture in ^op.
    {^op
        # Bind methods named ^op in the __local_symbol and __global_symbol
        # classes.
        __bind __local_symbol ^op {^sym
            ^code ^sym
        };
        __bind __global_symbol ^op {^self
            ^code (^self __sym)
        }
    } (
        # Initialize the operator to a handler which receives reference to
        # uninitialized symbols.
        ^opref{^symref
            # Invoke ^symref once to get the name of the symbol.
            {^sym
                # Invoke ^symref again to initialize the symbol to a
                # __global_symbol or __local_symbol object, as appropriate, and
                # pass the result of that (which is the name of the symbol) to
                # the operator code.
                ^code (^symref
                    (__stack __if_global {
                        __new __global_symbol ^sym
                    } {
                        __wrap __local_symbol ^sym
                    })
                )
            } (^symref[])
        }
    )
}};

# __declare is a trivial symbol operator. It does nothing if the symbol is
# already initialized, but still causes the symbol to go through the operator
# dispatch process, which ensures the symbol is initialized to a symbol object.
# `sym __declare` guarantees that `sym` responds to symbol object messages, such
# as `sym __sym_cell`.
__operator __declare __symop {^sym .};

# Dereference: get the value of a symbol.
${^} {^sym
    {
        (^sym __declare);
        ^sym __sym_cell{^}
    }[]
};

# Assignment: change the value of a symbol.
__operator := __symop {^sym{^value
    ^sym __declare;
    ^sym __sym_cell {(^value)}
}};

# Equality: determine if two symbols (the symbols themselves, not their values)
# are identical.
__operator == __symop {^sym1{^sym2
    {^old1
        {^old2
            # We assign `false` to `sym1`, and then assign `true` to `sym2`. If
            # the symbols are the same, this will overwrite `sym1`, so `sym1`
            # will have the value `true` afterwards. Otherwise, `sym1` will
            # still be `false`.
            ^sym1 := false;
            ^sym2 := true;

            {^result
                # Get the result (which is $^sym1, since `sym1` is `true` if and
                # only if the symbols are identical) and then restore the old
                # values of the symbols.
                ^sym1 := ^old1;
                ^sym2 := ^old2;

                ^result
            } ($^sym1)

    # Save the old values of the symbols before doing the equality test above,
    # since the test involves writing to the symbols.
        }($^sym2)
    }($^sym1)
}};

.
