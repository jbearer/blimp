# The definition of the core grammar is in `core_bootstrap`, so import that
# first (using the built- in, non-macro version of import).
!(import _1 core_bootstrap.bli);

# Add features that not every user of `core_bootstrap` may want, such as
# first-class import statements.
__core {
    !(
        \> {^ {`import`} {`\`sym\``}; 3} {^toks
            {
                n_ref{^ ^};
                n n_ref;
                n_ref _0;

                module{^ ^};
                ^toks {^tok
                    {
                        _0{^{{
                            # import
                            n_ref _1
                        }}};
                        _1{^{{
                            module {(^tok)};
                            n_ref _2
                        }}};

                        n[] []
                    }[]
                };

                {^ {`!`} (parse {^ {^ {`import`}; _7} {`1`} (module[]); _3}) ; _7 }
            }[]
        };
        \> {^ {`import`} {`\`sym\``}; 4} {^toks
           {
                n_ref{^ ^};
                n n_ref;
                n_ref _0;

                module{^ ^};
                ^toks {^tok
                    {
                        _0{^{{
                            # import
                            n_ref _1
                        }}};
                        _1{^{{
                            module {(^tok)};
                            n_ref _2
                        }}};

                        n[] []
                    }[]
                };

                {^ {`!`} (parse {^ {^ {`import`}; _7} {`1`} (module[]); _3}) ; _7 }
            }[]
        };

        .
    )
};

# If this file is being prepended to another, cause the contents of the
# remaining input to be parsed using the core grammar, non-terminal 1.
__run
