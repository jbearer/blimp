#: --skip-racket --blimp-timeout 0.9 -fno-gc-tracing -fno-gc-cycle-detection

# Tests garbage collection of self-cycles. Creates 1 million objects, each of
# which has two references to itself: the special `this` reference, and a user-
# created `self` reference.
#
# This is the same test as tracing_cycle_self, but it runs with reference
# counting on and tracing is disabled. It should be slower than the tracing
# version of the test, otherwise reference counting isn't gaining us anything
# compared to tracing. If you change either the blimp-timeout value above or the
# one in tracing_cycle_self, check that refcount_cycle_self is still faster
# than tracing_cycle_self.

bind test.go1 (
    self{:=|this{.get|.}}
);

go10{:=|{do|
    {test|.}{.go1|.};
    {test|.}{.go1|.};
    {test|.}{.go1|.};
    {test|.}{.go1|.};
    {test|.}{.go1|.};
    {test|.}{.go1|.};
    {test|.}{.go1|.};
    {test|.}{.go1|.};
    {test|.}{.go1|.};
    {test|.}{.go1|.};
    .
}};

go100{:=|{do|
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    .
}};

go1000{:=|{do|
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    .
}};

go10000{:=|{do|
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    .
}};

go100000{:=|{do|
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    .
}};

go1000000{:=|{do|
    go100000{.get|.}{.eval|.};
    go100000{.get|.}{.eval|.};
    go100000{.get|.}{.eval|.};
    go100000{.get|.}{.eval|.};
    go100000{.get|.}{.eval|.};
    go100000{.get|.}{.eval|.};
    go100000{.get|.}{.eval|.};
    go100000{.get|.}{.eval|.};
    go100000{.get|.}{.eval|.};
    go100000{.get|.}{.eval|.};
    .
}};

go1000000{.get|.}{.eval|.};

{gc|.}{!print_stats|.};

{gc|.}{!expect_clean|.};
    # Reference counting with entanglement is supposed to be able to perfectly
    # clean up self-cycles. The only allocated objects should be reachable ones.
.
