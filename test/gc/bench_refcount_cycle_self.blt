#: --skip-racket -fno-gc-tracing -fno-gc-cycle-detection

# Tests garbage collection of self-cycles. Creates 1 million objects and gives
# each one a reference to itself.
#
# This is the same test as tracing_cycle_self, but it runs with reference
# counting on and tracing is disabled. It should be faster than the tracing
# version of the test, otherwise reference counting isn't gaining us anything
# compared to tracing.

!benchmark{n{^ 1000000}; refcount_cycle_self} {
    {^value
        # value is a setter function for a field `value:self`. We set this
        # field to point at `value` itself, creating a self-loop.
        ^value ^value
    } {^self # A setter for `self`
        self {^} ^self
    }
};

!gc_print_stats;
!gc_expect_clean;
.
