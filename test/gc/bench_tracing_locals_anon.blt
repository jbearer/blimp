#: --skip-racket -fno-gc-cycle-detection -fno-gc-refcount

# Tests garbage collection of local variables; that is, objects which are
# referenced by a parent object (or a parent of a parent, etc.).
#
# This is the same test as erc_locals_anon, but it runs with tracing on and
# enhanced reference counting is disabled. It should be slower than the ERC
# version of the test, otherwise ERC isn't gaining us anything compared to
# tracing.

!benchmark{n{^ 500000}; tracing_locals_anon} {
    {
        # Create a local variable which is an immediate child of this block. We
        # first initialize `direct_local` to a reference to itself, and then we
        # use that reference to send it an object which is a child of this one.
        direct_local{^ref ^ref};
        direct_local {.};

        # Create a local variable which is a descendant, but not an immediate
        # child, of the owning object: the value of `nested_local` is an object
        # which is a child of the block used to initialize `nested_local`, which
        # in turn is a child of this object.
        nested_local{^ref ^ref{.}};

        .
    }[]
};

!gc_collect;
!gc_print_stats;
!gc_check_collect;
.
