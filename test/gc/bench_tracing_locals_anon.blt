#: --skip-racket --blimp-timeout 5.7 -fno-gc-cycle-detection -fno-gc-refcount

# Tests garbage collection of local variables; that is, objects which are
# referenced by a parent object (or a parent of a parent, etc.).
#
# This is the same test as erc_locals_anon, but it runs with tracing on and
# enhanced reference counting is disabled. It should be slower than the ERC
# version of the test, otherwise ERC isn't gaining us anything compared to
# tracing. If you change either the blimp-timeout value above or the one in
# erc_locals_anon, check that erc_locals_anon is still faster than
# tracing_locals_anon.

bind set symbol (
    this{.get|.}{.eval|.}{:=|that{.get|.}}
);

bind locals.create_locals_in_method (
    method_direct_local{:=|uninitialized};
    {set|method_direct_local} bar;
    method_nested_local{:=|foo};
    .
);

bind locals.init (
    self{:=|this{.get|.}};
    self{.get|.}{.eval|.};
    self{.get|.}{.create_locals_in_method|.};
    .
);

go1{:=|{do|
    {locals|
        direct_local{:=|uninitialized};
        {set|direct_local} bar;
            # Create a local variable which is an immediate child of this block.
        nested_local{:=|foo};
            # Create a local variable which is a descendant, but not an
            # immediate child, of the owning object: foo is a child of the :=
            # block, which is a child of this object.
        .
    }{.init|.};

    .
}};

go10{:=|{do|
    go1{.get|.}{.eval|.};
    go1{.get|.}{.eval|.};
    go1{.get|.}{.eval|.};
    go1{.get|.}{.eval|.};
    go1{.get|.}{.eval|.};
    go1{.get|.}{.eval|.};
    go1{.get|.}{.eval|.};
    go1{.get|.}{.eval|.};
    go1{.get|.}{.eval|.};
    go1{.get|.}{.eval|.};
    .
}};

go100{:=|{do|
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    go10{.get|.}{.eval|.};
    .
}};

go1000{:=|{do|
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    go100{.get|.}{.eval|.};
    .
}};

go10000{:=|{do|
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    go1000{.get|.}{.eval|.};
    .
}};

go100000{:=|{do|
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    go10000{.get|.}{.eval|.};
    .
}};

go100000{.get|.}{.eval|.};
go100000{.get|.}{.eval|.};
go100000{.get|.}{.eval|.};
go100000{.get|.}{.eval|.};
go100000{.get|.}{.eval|.};

{gc|.}{!collect|.};
{gc|.}{!print_stats|.};
{gc|.}{!check_collect|.};
.
