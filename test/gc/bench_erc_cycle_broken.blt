#: --skip-racket -fno-gc-tracing

# Tests garbage collection of cycles which get broken by the user. Creates 1000
# 10-element cycles, and then breaks each cycle.
#
# This is the same test as tracing_cycle_broken, but it runs with reference
# counting on and tracing is disabled. It should be slower than the tracing
# version of the test, otherwise reference counting isn't gaining us anything
# compared to tracing.

import std;

node{^
    {
        {^cell
            {^next
                ^cell {(^next)}
            }
        }(__cell[])
    }
};

!benchmark{n{^ 5000}; ops{^ 10}; refcount_cycle_broken} {
    __push_stack_frame[];

    # Create 10 nodes.
    n1 := (node[]);
    n2 := (node[]);
    n3 := (node[]);
    n4 := (node[]);
    n5 := (node[]);
    n6 := (node[]);
    n7 := (node[]);
    n8 := (node[]);
    n9 := (node[]);
    n10 := (node[]);

    # Link them into a cycle.
    ($n1) ($n2);
    ($n2) ($n3);
    ($n3) ($n4);
    ($n4) ($n5);
    ($n5) ($n6);
    ($n6) ($n7);
    ($n7) ($n8);
    ($n8) ($n9);
    ($n9) ($n10);
    ($n10) ($n1);

    # Break the cycle.
    ($n10) nil;

    # Leak the nodes.
    n1 := nil;
    n2 := nil;
    n3 := nil;
    n4 := nil;
    n5 := nil;
    n6 := nil;
    n7 := nil;
    n8 := nil;
    n9 := nil;
    n10 := nil;

    __pop_stack_frame[];

    .
};

!gc_print_stats;
!gc_expect_clean;
    # Since eventually all cycles are broken, reference counting should clean up
    # perfectly. The only allocated objects should be reachable ones.
.
