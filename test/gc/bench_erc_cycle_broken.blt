#: --skip-racket -fno-gc-tracing

# Tests garbage collection of cycles which get broken by the user. Creates 100k
# 10-element cycles, and then breaks each cycle.
#
# This is the same test as tracing_cycle_broken, but it runs with reference
# counting on and tracing is disabled. It should be slower than the tracing
# version of the test, otherwise reference counting isn't gaining us anything
# compared to tracing.

import runtime;

node{^
    {
        {^cell
            {^next
                ^cell {(^next)}
            }
        }(__cell[])
    }
};

!benchmark{n{^ 10000}; ops{^ 10}; refcount_cycle_broken} {
    # Create 10 nodes.
    1 := (node[]);
    2 := (node[]);
    3 := (node[]);
    4 := (node[]);
    5 := (node[]);
    6 := (node[]);
    7 := (node[]);
    8 := (node[]);
    9 := (node[]);
    10 := (node[]);

    # Link them into a cycle.
    ($1) ($2);
    ($2) ($3);
    ($3) ($4);
    ($4) ($5);
    ($5) ($6);
    ($6) ($7);
    ($7) ($8);
    ($8) ($9);
    ($9) ($10);
    ($10) ($1);

    # Break the cycle.
    ($10) nil;

    # Leak the nodes.
    1 := nil;
    2 := nil;
    3 := nil;
    4 := nil;
    5 := nil;
    6 := nil;
    7 := nil;
    8 := nil;
    9 := nil;
    10 := nil;

    .
};

!gc_print_stats;
!gc_expect_clean;
    # Since eventually all cycles are broken, reference counting should clean up
    # perfectly. The only allocated objects should be reachable ones.
.
