# A version of Tarjan's union-find data structure for disjoint set operations,
# used by a few of the GC benchmarks. The data structure is a forest of inverted
# trees, where each node has a single outgoing edge to its parent, rather than
# many outgoing edges to its children, like in a normal tree. In other words, a
# typical union-find is a wide DAG: a directed acyclic graphs where many nodes
# have many incoming edges. This makes it an excellent data structure to study
# the limits of reference counting garbage collection.
#
# Conceptually, each tree in the forest represents a set, or, equivalently, an
# equivalence class of nodes. The root of each tree is said to be the
# representative element of that set. We can efficiently check if two nodes are
# in the same set by traversing to the roots of their respective trees and
# checking if they share the same root. Note though that the representative of a
# set can change when two sets are unioned.
#
# The data structure supports three operations:
#   union node node:
#       Merge the set containing one node with the set containing another.
#   find node:
#       Find the representative node of the set containing the receiver.
#   equiv node node:
#       Test if one node is in the same set as another.
#

################################################################################
# Booleans
#

import runtime;

true {
    ^ {^method
        if_true{^ {{^block
            ^block[]
        }}};

        if_false{^ {{^block
            .
        }}};

        ^method[]
    }
};

false {
    ^ {^method
        if_true{^ {{^block
            .
        }}};

        if_false{^ {{^block
            ^block[]
        }}};

        ^method[]
    }
};

################################################################################
# Union-find data structure
#

nil {^
    {^method
        if_nil{^{
            {^if
                {^else
                    ^if []
                }
            }
        }};

        ^method[]
    }
};

node {^{
    {^method
        parent {
            ^({^cell {(^cell)}}(__cell[]));
            parent[] {nil}
        };
        is_test {^({^cell {(^cell)}}(__cell[]))};

        set_parent{^{
            {^val
                parent[] { (^val) }
            }
        }};

        get_parent{^{
            parent[] {^}
        }};

        set_is_test{^{
            {^val
                is_test[] { (^val) }
            }
        }};

        get_is_test{^{
            is_test[] {^}
        }};

        is{^{
            {^that
                set_is_test[] false;
                ^that set_is_test true;
                get_is_test[]
            }
        }};

        if_nil{^{
            {^if
                {^else
                    ^else []
                }
            }
        }};

        ^method[]
    }
}};

find{
    ^{^node
        ^node get_parent if_nil {
            (^node)
        } {
            root {
                ^ ({^root
                    {(^root)}
                } (find (^node get_parent)))
            };

            ^node set_parent (root[]);
            root[]
        }
    }
};

union{
    ^{^node1
        {^node2
            {^root1
                {^root2
                    (^root1 is ^root2) if_false {
                        (^root1 set_parent ^root2)
                    }
                } (find ^node2)
            } (find ^node1)
        }
    }
};

equiv{
    ^{^node1
        {^node2
            (find ^node1) is (find ^node2)
        }
    }
};

.
