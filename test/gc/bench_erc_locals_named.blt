#: --skip-racket --blimp-timeout 0.5 -fno-gc-tracing -fno-gc-refcount

# Tests garbage collection of local variables; that is, objects which are
# referenced by a parent object (or a parent of a parent, etc.). These seem easy
# to collect, since the references are all fairly local and acyclic. However,
# these kinds of references create cycles with the internal parent pointers,
# making collection a bit tricky.
#
# This test is similar to bench_erc_locals_anon. However, unlike that test,
# where the scope with the locals is completely transient, the scope containing
# the locals here is temporarily referenced by a long-lived object before being
# released. This means that it briefly becomes entangled with the long-lived
# object, making it more difficult to collect.

bind set symbol (
    this{.get|.}{.eval|.}{:=|that{.get|.}}
);

bind locals.create_locals_in_method (
    method_direct_local{:=|uninitialized};
    {set|method_direct_local} bar;
    method_nested_local{:=|foo};
    .
);

bind long_lived.do_test (
    scope {:=| {locals|
        direct_local{:=|uninitialized};
        {set|direct_local} bar;
            # Create a local variable which is an immediate child of this block.
        nested_local{:=|foo};
            # Create a local variable which is a descendant, but not an
            # immediate child, of the owning object: foo is a child of the :=
            # block, which is a child of this object.
        .
    }};
    scope{.get|.}{.eval|.};
    scope{.get|.}{.create_locals_in_method|.};

    scope{:=|.};
        # Get rid of our reference to `scope`, which should free its locals.
    .
);

long_lived{:=|{long_lived|.}};

{!benchmark|n{:=|100000}} {erc_locals_named|
    long_lived{.get|.}{.do_test|.}
};

{gc|.}{!print_stats|.};
{gc|.}{!expect_clean|.};
.
