#: --skip-racket -fno-gc-refcount -fno-gc-cycle-detection

# Tests garbage collection of complete graphs (K5).

import std;

node{^
    {
        {^cell
            {^next
                ^cell {(^next)}
            }
        }(__cell[])
    }
};

!benchmark{n{^ 5000}; ops{^ 25}; k_5} {
    __push_stack_frame[];

    # Create 5 nodes.
    1 := (node[]);
    2 := (node[]);
    3 := (node[]);
    4 := (node[]);
    5 := (node[]);

    # Link them into a complete graph.
    ($1) ($2);
    ($1) ($3);
    ($1) ($4);
    ($1) ($5);

    ($2) ($1);
    ($2) ($3);
    ($2) ($4);
    ($2) ($5);

    ($3) ($1);
    ($3) ($2);
    ($3) ($4);
    ($3) ($5);

    ($4) ($1);
    ($4) ($2);
    ($4) ($3);
    ($4) ($5);

    ($5) ($1);
    ($5) ($2);
    ($5) ($3);
    ($5) ($4);

    # Leak the nodes.
    1 := .;
    2 := .;
    3 := .;
    4 := .;
    5 := .;

    __pop_stack_frame[];

    .
};

!gc_collect;
!gc_print_stats;
!gc_check_collect;
.
