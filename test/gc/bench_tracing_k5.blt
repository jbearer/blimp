#: --skip-racket -fno-gc-refcount -fno-gc-cycle-detection

# Tests garbage collection of complete graphs (K5).

bind node.link (
    name{:=|that{.get|.}{.eval|.}{.eval|.}};
    name{.get|.}{:=|that{.get|.}{.eval|.}}
);

unit{:=|.};

{!benchmark|n{:=|50000}; ops{:=|25}} {k_5|
    # Create 5 nodes.
    1{:=|{node|1}};
    2{:=|{node|2}};
    3{:=|{node|3}};
    4{:=|{node|4}};
    5{:=|{node|5}};

    # Link them into a complete graph.
    1{.get|.}{.link|2{.get|.}};
    1{.get|.}{.link|3{.get|.}};
    1{.get|.}{.link|4{.get|.}};
    1{.get|.}{.link|5{.get|.}};

    2{.get|.}{.link|1{.get|.}};
    2{.get|.}{.link|3{.get|.}};
    2{.get|.}{.link|4{.get|.}};
    2{.get|.}{.link|5{.get|.}};

    3{.get|.}{.link|1{.get|.}};
    3{.get|.}{.link|2{.get|.}};
    3{.get|.}{.link|4{.get|.}};
    3{.get|.}{.link|5{.get|.}};

    4{.get|.}{.link|1{.get|.}};
    4{.get|.}{.link|2{.get|.}};
    4{.get|.}{.link|3{.get|.}};
    4{.get|.}{.link|5{.get|.}};

    5{.get|.}{.link|1{.get|.}};
    5{.get|.}{.link|2{.get|.}};
    5{.get|.}{.link|3{.get|.}};
    5{.get|.}{.link|4{.get|.}};

    # Leak the nodes.
    1{:=|unit{.get|.}};
    2{:=|unit{.get|.}};
    3{:=|unit{.get|.}};
    4{:=|unit{.get|.}};
    5{:=|unit{.get|.}};

    .
};

{gc|.}{!collect|.};
{gc|.}{!print_stats|.};
{gc|.}{!check_collect|.};
.
