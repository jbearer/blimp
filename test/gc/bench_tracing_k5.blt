#: --skip-racket -fno-gc-refcount -fno-gc-cycle-detection

# Tests garbage collection of complete graphs (K5).

import std;

node{^
    {
        {^cell
            {^next
                ^cell {(^next)}
            }
        }(__cell[])
    }
};

:benchmark{n{^ 5000}; ops{^ 25}; k_5} {
    __push_stack_frame[];

    # Create 5 nodes.
    n1 := (node[]);
    n2 := (node[]);
    n3 := (node[]);
    n4 := (node[]);
    n5 := (node[]);

    # Link them into a complete graph.
    ($n1) ($n2);
    ($n1) ($n3);
    ($n1) ($n4);
    ($n1) ($n5);

    ($n2) ($n1);
    ($n2) ($n3);
    ($n2) ($n4);
    ($n2) ($n5);

    ($n3) ($n1);
    ($n3) ($n2);
    ($n3) ($n4);
    ($n3) ($n5);

    ($n4) ($n1);
    ($n4) ($n2);
    ($n4) ($n3);
    ($n4) ($n5);

    ($n5) ($n1);
    ($n5) ($n2);
    ($n5) ($n3);
    ($n5) ($n4);

    # Leak the nodes.
    n1 := .;
    n2 := .;
    n3 := .;
    n4 := .;
    n5 := .;

    __pop_stack_frame[];

    .
};

:gc_collect;
:gc_print_stats;
:gc_check_collect;
.
