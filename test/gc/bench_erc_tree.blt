#: --skip-racket -fno-gc-tracing -fno-gc-refcount

# Tests garbage collection of trees, one of the most well-behaved data
# structures, since every node is referenced exactly once, by its parent.

import runtime;

nil{
    if_nil{^{
        {^if{^else
            ^if[]
        }}
    }};

    to_string{^{
        nil
    }};

    ^ {^msg
        ^msg[]
    }
};

node{^
    {^value{^left{^right
        value{^ {(^value)}};
        left{^ {(^left)}};
        right{^ {(^right)}};

        if_nil{^{
            {^if{^else
                ^else[]
            }}
        }};

        to_string{^{
            value[]
        }};

        {^msg
            ^msg[]
        }
    }}}
};

# Depth-first traversal, just so that we actually use the trees we make.
dfs{^
    {^node
        ^node if_nil {
            .
        } {
            dfs (^node left);
            dfs (^node right);
            ^node value
        }
    }
};

!benchmark{n{^ 10000}; erc_tree} {
    # We'll build the following tree:
    #                   a
    #                  / \
    #                 b   c
    #                /
    #               d
    # starting from the leaves and building up.

    {
        # Level 0
        d := (node d nil nil);

        # Level 1
        b := (node b ($d) nil);
        c := (node c nil nil);

        # Level 2 (root)
        a := (node a ($b) ($c));

        dfs ($a)
    }[]
};

!gc_print_stats;
!gc_expect_clean;

.

