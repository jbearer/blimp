#: --skip-racket --blimp-timeout 1.1 -fno-gc-tracing

# Tests garbage collection of trees, one of the most well-behaved data
# structures, since every node is referenced exactly once, by its parent.

bind tree.init (
    this{.get|.}{.eval|.};
    this{.get|.}
);

# Depth-first traversal, just so that we actually use the trees we make.
bind nil.dfs .;
bind tree.dfs (
    left{.get|.}{.dfs|.};
    right{.get|.}{.dfs|.};
    value{.get|.}
);

make_one_tree{:=|{do|
    # We'll build the following tree:
    #                   a
    #                  / \
    #                 b   c
    #                /
    #               d
    # starting from the leaves and building up.

    {do|
        # Level 0
        d {:=|{tree|
            value{:=|d};
            left{:=|{nil|.}};
            right{:=|{nil|.}}
        }{.init|.}};

        ## Level 1
        #b {:=|{tree|
        #    value{:=|b};
        #    left{:=|d{.get|.}};
        #    right{:=|{nil|.}}
        #}{.init|.}};
        #c {:=|{tree|
        #    value{:=|c};
        #    left{:=|{nil|.}};
        #    right{:=|{nil|.}}
        #}{.init|.}};

        ## Level 2 (root)
        #a {:=|{tree|
        #    value{:=|a};
        #    left{:=|b{.get|.}};
        #    right{:=|c{.get|.}}
        #}{.init|.}};

        #a{.get|.}{.dfs|.};

        .
    }{.eval|.}
}};

make_ten_trees{:=|{do|
    make_one_tree{.get|.}{.eval|.};
    make_one_tree{.get|.}{.eval|.};
    make_one_tree{.get|.}{.eval|.};
    make_one_tree{.get|.}{.eval|.};
    make_one_tree{.get|.}{.eval|.};
    make_one_tree{.get|.}{.eval|.};
    make_one_tree{.get|.}{.eval|.};
    make_one_tree{.get|.}{.eval|.};
    make_one_tree{.get|.}{.eval|.};
    make_one_tree{.get|.}{.eval|.};
    .
}};

make_one_hundred_trees{:=|{do|
    make_ten_trees{.get|.}{.eval|.};
    make_ten_trees{.get|.}{.eval|.};
    make_ten_trees{.get|.}{.eval|.};
    make_ten_trees{.get|.}{.eval|.};
    make_ten_trees{.get|.}{.eval|.};
    make_ten_trees{.get|.}{.eval|.};
    make_ten_trees{.get|.}{.eval|.};
    make_ten_trees{.get|.}{.eval|.};
    make_ten_trees{.get|.}{.eval|.};
    make_ten_trees{.get|.}{.eval|.};
    .
}};

make_one_thousand_trees{:=|{do|
    make_one_hundred_trees{.get|.}{.eval|.};
    make_one_hundred_trees{.get|.}{.eval|.};
    make_one_hundred_trees{.get|.}{.eval|.};
    make_one_hundred_trees{.get|.}{.eval|.};
    make_one_hundred_trees{.get|.}{.eval|.};
    make_one_hundred_trees{.get|.}{.eval|.};
    make_one_hundred_trees{.get|.}{.eval|.};
    make_one_hundred_trees{.get|.}{.eval|.};
    make_one_hundred_trees{.get|.}{.eval|.};
    make_one_hundred_trees{.get|.}{.eval|.};
    .
}};

make_ten_thousand_trees{:=|{do|
    make_one_thousand_trees{.get|.}{.eval|.};
    make_one_thousand_trees{.get|.}{.eval|.};
    make_one_thousand_trees{.get|.}{.eval|.};
    make_one_thousand_trees{.get|.}{.eval|.};
    make_one_thousand_trees{.get|.}{.eval|.};
    make_one_thousand_trees{.get|.}{.eval|.};
    make_one_thousand_trees{.get|.}{.eval|.};
    make_one_thousand_trees{.get|.}{.eval|.};
    make_one_thousand_trees{.get|.}{.eval|.};
    make_one_thousand_trees{.get|.}{.eval|.};
    .
}};

make_one_hundred_thousand_trees{:=|{do|
    make_ten_thousand_trees{.get|.}{.eval|.};
    make_ten_thousand_trees{.get|.}{.eval|.};
    make_ten_thousand_trees{.get|.}{.eval|.};
    make_ten_thousand_trees{.get|.}{.eval|.};
    make_ten_thousand_trees{.get|.}{.eval|.};
    make_ten_thousand_trees{.get|.}{.eval|.};
    make_ten_thousand_trees{.get|.}{.eval|.};
    make_ten_thousand_trees{.get|.}{.eval|.};
    make_ten_thousand_trees{.get|.}{.eval|.};
    make_ten_thousand_trees{.get|.}{.eval|.};
    .
}};

make_one_hundred_thousand_trees{.get|.}{.eval|.};

{gc|.}{!print_stats|.};
{gc|.}{!expect_clean|.};

.

