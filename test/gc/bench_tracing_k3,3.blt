#: --skip-racket -fno-gc-refcount -fno-gc-cycle-detection

# Tests garbage collection of complete bipartite graphs (K3,3).

import runtime;

node{^
    {
        {^cell
            {^next
                ^cell {(^next)}
            }
        }(__cell[])
    }
};

!benchmark{n{^ 5000}; ops{^ 9}; `k_3,3`} {
    # Create 6 nodes.
    1 := (node[]);
    2 := (node[]);
    3 := (node[]);
    4 := (node[]);
    5 := (node[]);
    6 := (node[]);

    # Link them into a complete bipartite graph.
    ($1) ($4);
    ($1) ($5);
    ($1) ($6);
    ($2) ($4);
    ($2) ($5);
    ($2) ($6);
    ($3) ($4);
    ($3) ($5);
    ($3) ($6);

    ($4) ($1);
    ($4) ($2);
    ($4) ($3);
    ($5) ($1);
    ($5) ($2);
    ($5) ($3);
    ($6) ($1);
    ($6) ($2);
    ($6) ($3);

    # Leak the nodes.
    1 := .;
    2 := .;
    3 := .;
    4 := .;
    5 := .;
    6 := .;

    .
};

!gc_collect;
!gc_print_stats;
!gc_check_collect;
.
