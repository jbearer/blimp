#: --skip-racket -fno-gc-refcount -fno-gc-cycle-detection

# Tests garbage collection of complete bipartite graphs (K3,3).

import std;

node{^
    {
        {^cell
            {^next
                ^cell {(^next)}
            }
        }(__cell[])
    }
};

!benchmark{n{^ 5000}; ops{^ 9}; `k_3,3`} {
    __push_stack_frame[];

    # Create 6 nodes.
    n1 := (node[]);
    n2 := (node[]);
    n3 := (node[]);
    n4 := (node[]);
    n5 := (node[]);
    n6 := (node[]);

    # Link them into a complete bipartite graph.
    ($n1) ($n4);
    ($n1) ($n5);
    ($n1) ($n6);
    ($n2) ($n4);
    ($n2) ($n5);
    ($n2) ($n6);
    ($n3) ($n4);
    ($n3) ($n5);
    ($n3) ($n6);

    ($n4) ($n1);
    ($n4) ($n2);
    ($n4) ($n3);
    ($n5) ($n1);
    ($n5) ($n2);
    ($n5) ($n3);
    ($n6) ($n1);
    ($n6) ($n2);
    ($n6) ($n3);

    # Leak the nodes.
    n1 := .;
    n2 := .;
    n3 := .;
    n4 := .;
    n5 := .;
    n6 := .;

    __pop_stack_frame[];

    .
};

!gc_collect;
!gc_print_stats;
!gc_check_collect;
.
