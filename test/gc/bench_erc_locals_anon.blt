#: --skip-racket -fno-gc-tracing -fno-gc-refcount

# Tests garbage collection of local variables; that is, objects which are
# referenced by a parent object (or a parent of a parent, etc.). These seem easy
# to collect, since the references are all fairly local and acyclic. However,
# these kinds of references create cycles with the internal parent pointers,
# making collection a bit tricky.
#
# This test is similar to bench_erc_locals_named. However, unlike that test,
# where the scope with the locals is temporarily referenced by a long-lived
# object before being released, the scope containing the locals here is
# completely anonymous. This means that it never becomes entangled with the
# long-lived object, making it slightly easier to collect.

!benchmark{n{^ 500000}; erc_locals_anon} {
    {
        # Create a local variable which is an immediate child of this block. We
        # first initialize `direct_local` to a reference to itself, and then we
        # use that reference to send it an object which is a child of this one.
        direct_local{^ref ^ref};
        direct_local {.};

        # Create a local variable which is a descendant, but not an immediate
        # child, of the owning object: the value of `nested_local` is an object
        # which is a child of the block used to initialize `nested_local`, which
        # in turn is a child of this object.
        nested_local{^ref ^ref{.}};

        .
    }[]
};

!gc_print_stats;
!gc_expect_clean;

.
