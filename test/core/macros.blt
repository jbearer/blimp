#: --skip-racket

import parse_tree;

################################################################################
# First things first: define a macro for defining macros at parse time, to test
# parse-time behavior of macros without worrying about run-time macro
# definitions.
#
# We can define a macro which executes at parse time by wrapping the macro
# definition in `!()`. Here we will define a macro that defines macros with this
# wrapper.
#

!(
    \> 3 -> {`\\\\>` <3> <6>} {^toks
        {
            n_ref{^ ^};
            n n_ref;
            n_ref 0;

            production{^ ^};
            handler{^ ^};
            for ^tok in ^toks {
                {
                    0{^{{
                        n_ref 1
                    }}};
                    1{^{{
                        production {(^tok)};
                        n_ref 2
                    }}};
                    2{^{{
                        handler {(^tok)};
                        n_ref 3
                    }}};

                    n[] []
                }[]
            };

            parse (3 -> {`!` `(``\\>` `(`{production[]}`)` `(`{handler[]}`)``)`})
        }[]
    };

    # We have to define this for precedence levels 3 and 4 (Stmt and StmtNoMsg)
    # since the production does not start with a message name token and can be
    # used in either context. This is a horrible mess and should be fixed by
    # improving the built-in grammar.
    \>  4 -> {`\\\\>` <3> <6>} {^toks
        {
            n_ref{^ ^};
            n n_ref;
            n_ref 0;

            production{^ ^};
            handler{^ ^};
            for ^tok in ^toks {
                {
                    0{^{{
                        n_ref 1
                    }}};
                    1{^{{
                        production {(^tok)};
                        n_ref 2
                    }}};
                    2{^{{
                        handler {(^tok)};
                        n_ref 3
                    }}};

                    n[] []
                }[]
            };

            parse (3 -> {`!` `(``\\>` `(`{production[]}`)` `(`{handler[]}`)``)`})
        }[]
    };

    .
);

################################################################################
# Simplest possible macro: create a new token and define it to a symbol.
#
# Kind of like `#define my_keyword foo`
#

# Before the macro is parsed, `my_keyword` just parses to `my_keyword`.
:expect_error {
    :expect_eq my_keyword foo
};

# Define the macro.
\\> 7 -> {my_keyword} {^toks
    7 -> {foo}
};

# Once the macro has been parsed, `my_keyword` parses to `foo`.
:expect_eq my_keyword foo;

################################################################################
# Defining macros for precedences, and using them to define new macros.
#

# Define an alias @@term for the precedence level 7.
\\> custom1 -> {<custom1> `@@term` <6>} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref 0;

        macro{^ ^};
        handler{^ ^};
        for ^tok in ^toks {
            {
                0{^{{
                    macro {(^tok)};
                    n_ref 1
                }}};
                1{^{{
                    n_ref 2
                }}};
                2{^{{
                    handler {(^tok)};
                    n_ref 3
                }}};

                n[] []
            }[]
        };

        parse (3 -> {`\\\\>` `7` `=>` `(` {macro[]} `)` {handler[]}})
    }[]
};

# Define a new macro at precedence 7 using the @@term alias.
_ -> {`my_keyword2`} @@term {(7 -> {bar})};
:expect_eq my_keyword2 bar;

# Do it again, make sure the handler is idempotent.
_ -> {`my_keyword3`} @@term {(7 -> {baz})};
:expect_eq my_keyword3 baz;

# Old macros should still work.
:expect_eq my_keyword foo;

# Just straight-up define @term to 7
_ -> {`@term`} @@term {(7 -> {7})};

# Define a new macro at precedence 7 using the @term alias.
\\> @term -> {`my_keyword20`} {(7 -> {foo})};
:expect_eq my_keyword20 foo;

# Define a macro with a 7-level parameter using the @term alias.
\\> @term -> {`my_keyword21` <@term>} {(7 -> {bar})};
:expect_eq my_keyword21 {^} bar;

################################################################################
# Macros do not take effect until everything we have parsed has lower precedence
# than the first token of the macro. And, new tokens introduced by the macro are
# not lexed until the macro takes effect.
#

(
    \\> 3 -> {<7> `when_will_we_lex_this_token`} {(7 -> {`foo`})};
    :expect_eq ({^} when_will_we_lex_this_token) `when_will_we_lex_this_token`
);
:expect_eq ({^} when_will_we_lex_this_token) `foo`;

################################################################################
# Defining a macro in the production tree for another macro.
#

\\> 7 -> {
    (
        \\> 7 -> {`my_keyword4`} {(7 -> {`foo`})};
        `my_keyword5`
    )
} {
    parse (7 -> {`my_keyword4`})
};

:expect_eq my_keyword4 foo;
:expect_eq my_keyword5 foo;

################################################################################
# Defining a macro in the handler for another macro.
#

\\> 7 -> {`my_keyword6`} {
    \\> 7 -> {`my_keyword7`} {(7 -> {`bar`})};
    parse (7 -> {`my_keyword7`})
};

:expect_eq my_keyword6 bar;

################################################################################
# Defining a macro in the expansion of another macro.
#

\\> 7 -> {`define_in_expansion`} {
    parse (1 -> {
        `\\\\>` `7` `->` `{` `defined_in_expansion` `}` `{`
            `(` `7` `->` `{` `foo` `}` `)`
        `}` (`;`)
        `defined_in_expansion`
    })
};

:expect_eq define_in_expansion `defined_in_expansion`;
    # The use of `defined_in_expansion` in the expansion of
    # `define_in_expansion` does not itself get expanded to `foo`, because macro
    # expansions are not piped through the lexer, since they are already
    # formatted as a stream of tokens. So adding the keyword
    # `defined_in_expansion` does not affect the token `defined_in_expansion`
    # later in the expansion, which has already been lexed as a symbol.
:expect_eq defined_in_expansion foo;

# If we do the same thing, but now use a token that already exists for the macro
# within the macro, then we should be able to use the inner macro in the
# expansion of the outer one.
\\> 7 -> {`+` `-` `*`} {7 -> {foo}};

\\> 7 -> {`define_in_expansion2`} {
    parse (1 -> {
        `\\\\>` `7` `->` `{` `+` `+` `}` `{`
            `(` `7` `->` `{``bar``}` `)`
        `}` (`;`)
        `+` `+`
    })
};

:expect_eq define_in_expansion2 bar;
:expect_eq + + bar;

################################################################################
# Macros may take effect during reparsing of the expansion of another macro, but
# not take effect until sometime later outside of the expansion.
#

\\> 7 -> {`define_in_expansion3`} {
    parse (1 -> {
        `\\\\>` `3` `->` `{``<``7``>` `-``}` `{`
            `(` `7` `->` `{``foo``}` `)`
        `}` (`;`)
        `bar``-`
    })
};

{
    :expect_eq define_in_expansion3 foo
}[];
:expect_eq (bar-) foo;

# If we try to use the macro defined in the expansion while in a nested
# expression, it won't expand, but neither will the newly defined token be
# lexed, so we can use it as a normal symbol.
\\> 7  -> {`define_in_expansion4`} {
    parse (1 -> {
        `\\\\>` `3` `->` `{``<``7``>` `*``}` `{`
            `(` `7` `->` `{``foo``}` `)`
        `}` (`;`)
        `bar` `*`
    })
};
{
    define_in_expansion4;
    :expect_eq (bar*) bar;
        # Here, bar* simply parses as a send `bar` `*`. Since `bar` is an
        # undefined symbol, a reference to `bar` is passed to `*`, which is also
        # an undefined symbol, so the result is a reference to `*` passed to the
        # reference to `bar`, which sets `bar` to the reference to `*` and
        # returns`bar`.
    # Check that `bar` now contains a reference to `*`.
    bar {foo};
    :expect_eq (* []) foo;

    :expect_eq * *
}[];
# Outside of the nested expression, we can still use * as a symbol as long as it
# is not preceded by a term, since we only expect it as a token when preceded by
# a term.
:expect_eq * *;
:expect_eq (bar*) foo;

################################################################################
# Macros can be used as soon as the parser state is lower precedence than the
# new production -- even inside nested expressions.
#

:expect_eq ((\\> 7 -> {`nested`} {(7 -> {`foo`})}; {^}) nested) foo;

################################################################################
# Adding a macro with very low precedence but a high-precedence first symbol.
#

\\> 1 -> {`low_prec`} {(7 -> {`foo`})};
:expect_eq (low_prec) foo;

################################################################################
# Macro handler with mutable state.
#

\\> 7 -> {`static` <7>} {^toks
    value_ref{^ ^};
    value{^ref
        value_ref{(^ref)};
        value_ref[] {{undefined}}
    };

    {^old_value
        for ^tok in ^toks {
            value_ref[] {(^tok)}
        };

        1 -> {{(^old_value)}}
    } (value[])
};

:expect_eq (static foo) undefined;
:expect_eq (static bar) foo;
:expect_eq (static[]) bar;

################################################################################
# Macro matching uses the correct precedence for arguments.
#

sub_from_3{^} {^rhs
    3{^} {0};
    2{^} {1};
    1{^} {2};
    ^rhs[]
};

sub_from_2{^} {^rhs
    2{^} {0};
    1{^} {1};
    ^rhs[]
};

sub_from_1{^} {^rhs
    1{^} {0};
    ^rhs[]
};

subtract{^} {^lhs{^rhs
    3{^} sub_from_3;
    2{^} sub_from_2;
    1{^} sub_from_1;
    ^lhs ^rhs
}};

\\> custom1 -> {<custom2> `infixr-` <custom1>} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref 0;

        lhs{^ ^};
        rhs{^ ^};
        for ^tok in ^toks {
            {
                0{^{{
                    lhs {(^tok)};
                    n_ref 1
                }}};
                1{^{{
                    n_ref 2
                }}};
                2{^{{
                    rhs {(^tok)};
                    n_ref 3
                }}};

                n[] []
            }[]
        };

        parse (3 -> {`subtract` {6 => (lhs[])} {6 => (rhs[])}})
    }[]
};

:expect_eq (3 infixr- 2) 1;
:expect_eq ((3 infixr- 2) infixr- 1) 0;
:expect_eq (3 infixr- 2 infixr- 1) 2;

\\> custom1 -> {<custom1> `infixl-` <custom2>} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref 0;

        lhs{^ ^};
        rhs{^ ^};
        for ^tok in ^toks {
            {
                0{^{{
                    lhs {(^tok)};
                    n_ref 1
                }}};
                1{^{{
                    n_ref 2
                }}};
                2{^{{
                    rhs {(^tok)};
                    n_ref 3
                }}};

                n[] []
            }[]
        };

        parse (3 -> {`subtract` {6 => (lhs[])} {6 => (rhs[])}})
    }[]
};

:expect_eq (3 infixl- 2 infixl- 1) 0;

# Mixing equal-precedence operators with different associativities causes an
# ambiguous parse error.
:expect_error { :eval_as 1 `3 infixr- 2 infixl- 1` };

# But adding parentheses fixes the issue;
:expect_eq ((3 infixr- 2) infixl- 1) 0;
:expect_eq (3 infixr- (2 infixl- 1)) 2;

################################################################################
# Macro expansions behave like the precedence of the macro definition.
#

id{^} {^};
\\> 7 -> {`multi` `token` `term`} {(1 -> {`id` `foo`})};
\\> 7 -> {`requires_term` <7>} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref 0;

        arg{^ ^};
        for ^tok in ^toks {
            {
                0{^{{
                    n_ref 1
                }}};
                1{^{{
                    arg{(^tok)};
                    n_ref 2
                }}};

                n[] []
            }[]
        };

        1 -> {{arg[]}}
    }[]
};

:expect_eq requires_term multi token term foo;

################################################################################
# The precedence of the parse tree returned by the macro can be different than
# that of the macro definition itself.
#

\\> 7 -> {`high_precedence...or_is_it?`} {(1 -> {foo})};
:expect_eq high_precedence...or_is_it? foo;

\\> 7 -> {`uses_high_precedence` <7>} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref 0;

        arg{^ ^};
        for ^tok in ^toks {
            {
                0{^{{
                    n_ref 1
                }}};
                1{^{{
                    arg{(^tok)};
                    n_ref 2
                }}};

                n[] []
            }[]
        };

        :expect_ne (arg[]{^}) 7;
        parse (6 -> {{arg[]}})
    }[]
};
:expect_eq uses_high_precedence foo foo;

################################################################################
# Macros defined in a module can be used in an importing module.
#

:expect_eq defined_in_module `defined_in_module`;
import macro_module;
:expect_eq defined_in_module foo;

################################################################################
# A symbol with a prefix which is a keyword is still parsed as a symbol.
#

\\> 7 -> {`kw_prefix` <7>} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref 0;

        arg{^ ^};
        for ^tok in ^toks {
            {
                0{^{{
                    n_ref 1
                }}};
                1{^{{
                    arg{(^tok)};
                    n_ref 2
                }}};
                n[] []
            }[]
        };

        1 -> {{arg[]}}
    }[]
};

:expect_eq kw_prefixfoo `kw_prefixfoo`;

################################################################################
# Defining an ad-hoc non-terminal (e.g. to represent a list of symbols).
#

\\> symbols -> {<7>} {^};

\\> symbols -> {<7> <symbols>} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref 0;

        sym{^ ^};
        syms{^ ^};
        for ^tok in ^toks {
            {
                0{^{{
                    sym{(^tok)};
                    n_ref 1
                }}};
                1{^{{
                    syms{(^tok)};
                    n_ref 2
                }}};

                n[] []
            }[]
        };

        {
            ^(sym[]);
            (syms[])^;
            symbols
        }
    }[]
};

\\> 7 -> {`car` `(` <symbols> `)`} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref 0;

        syms{^ ^};
        for ^tok in ^toks {
            {
                0{^{{
                    n_ref 1
                }}};
                1{^{{
                    n_ref 2
                }}};
                2{^{{
                    syms{(^tok)};
                    n_ref 3
                }}};
                3{^{{
                    n_ref 4
                }}};

                n[] []
            }[]
        };

        fst{^ ^};
        for ^sym in (syms[]) {
            fst{(^sym)}
        };
        fst[]
    }[]
};

\\> symbols -> {`cdr` `(` <symbols> `)`} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref 0;

        syms{^ ^};
        for ^tok in ^toks {
            {
                0{^{{
                    n_ref 1
                }}};
                1{^{{
                    n_ref 2
                }}};
                2{^{{
                    syms {(^tok)};
                    n_ref 3
                }}};
                3{^{{
                    n_ref 4
                }}};

                n[] []
            }[]
        };

        if_fst_ref{^ ^};
        if_fst if_fst_ref;
        if_fst_ref {^t{^f ^t[]}};

        {^out
            for ^tok in (syms[]) {
                if_fst {
                    .
                } {
                    (^out) ^tok
                };
                if_fst_ref {^t{^f ^f[]}}
            };
            symbols
        }
    }[]
};

:expect_eq car(foo) foo;
:expect_eq car(foo bar) foo;
:expect_eq car(foo bar baz) foo;
:expect_eq car(cdr(foo bar)) bar;
:expect_eq car(cdr(foo bar baz)) bar;
:expect_eq car(cdr(cdr(foo bar baz))) baz;

# We should be able to return an ad-hoc non-terminal expression from a macro
# definition by specifying the ad-hoc non-terminal for which the expression
# parses.
\\> symbols -> {`cdrcdr` `(` <symbol> `,` <symbols> `)`} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref 0;

        nt{^ ^};
        syms{^ ^};
        for ^tok in ^toks {
            {
                0{^{{
                    n_ref 1
                }}};
                1{^{{
                    n_ref 2
                }}};
                2{^{{
                    (for ^tree in ^tok {
                        (for ^nt in ^tree {
                            nt{(^nt)}
                        })
                    });
                    n_ref 3
                }}};
                3{^{{
                    n_ref 4
                }}};
                4{^{{
                    syms {(^tok)};
                    n_ref 5
                }}};
                5{^{{
                    n_ref 6
                }}};

                n[] []
            }[]
        };

        parse ((nt[]) -> {`cdr` `(` `cdr` `(` {raw:syms[]} `)``)`})
            # Does not work if the non-terminal is in the expression tree, like
            # `1`.
    }[]
};

:expect_eq car(cdrcdr(symbols, foo bar baz)) baz;
:expect_error { :eval_as 1 `car(cdrcdr(1, foo bar baz))` };

################################################################################
# In a state where we expect only a symbol, any token should parse as a symbol,
# even if it would normally parse as a special token.
#

\\> 7 -> {`token_or_symbol`} {(7 -> {`foo`})};

\\> 7 -> {`'` <symbol>} {^toks
    {
        n_ref{^ ^};
        n n_ref;
        n_ref 0;

        sym{^ ^};
        for ^tok in ^toks {
            {
                0{^{{
                    n_ref 1
                }}};
                1{^{{
                    sym{(^tok)};
                    n_ref 2
                }}};
                n[] []
            }[]
        };

        6 -> {{7 => (sym[])}}
    }[]
};

:expect_eq token_or_symbol `foo`;
:expect_eq 'token_or_symbol `token_or_symbol`;
:expect_eq ' + `+`;

################################################################################
# In a state where we are only expecting a specific token, any other input
# should result in a parse error.
#

\\> 7 -> {`special_token1` `special_token2`} {(7 -> {foo})};

:expect_eq special_token1 special_token2 foo;
:expect_error {
    :eval_as 1 `special_token1 foo`
};

################################################################################
# Macros with nested parse trees.
#

\\> 7 -> {`nested_symbol`} {(1 -> {{7 -> {`foo`}}})};
:expect_eq nested_symbol `foo`;

\\> 7 -> {`nested_block`} {(1 -> { {7 -> {`{` `foo` `}`}} })};
:expect_eq (nested_block []) `foo`;

\\> 7 -> {`nested_send`} {( 1 -> {{1 -> {`id` `foo`} }} )};
:expect_eq nested_send `foo`;

\\> 7 -> {`nested_parens`} {(1 -> {{ 7 -> {`(` `foo` `)`} }} )};
:expect_eq nested_parens `foo`;

################################################################################
# Run-time macros
#

# Check that run-time macros have no effect at parse time.
\> (7 -> {`this_will_not_be_defined_at_parse_time`}) {(7 -> {`foo`})};
:expect_eq this_will_not_be_defined_at_parse_time `this_will_not_be_defined_at_parse_time`;

# But the macro above is defined at run-time.
:eval_as 1 `:expect_eq this_will_not_be_defined_at_parse_time foo`;

################################################################################
# Object terminals in a macro production is an error
#

:expect_error { :eval `\\> 7 -> {(!{^})} {(7 -> {foo})}` };

################################################################################
# Object terminals in a macro expansions are allowed
#

!(
    cell{^} {
        {
            val{^ref
                ^ref{undefined};
                {^M
                    {^old
                        ^ref {(^M) ^old};
                        ^old
                    } (val[])
                }
            }
        }[]
    }
);

\\> 7 -> { `singleton` } {
    (1 -> {
        (!(cell[]))
    })
};

:expect_eq (singleton {foo}) undefined;
:expect_eq (singleton {^}) foo;

################################################################################
# Each expansion of a macro which expands to an untether expression creates a
# different object literal for each lexical application of the macro.
#

\\> 7 -> { `singleton2` } {
    parse (1 -> {
        `!` `(` `cell` `[]` `)`
    })
};

:expect_eq (singleton2 {foo}) undefined;
:expect_eq (singleton2 {^}) undefined;

# But it's still one object literal per lexical application, so we can still use
# a single lexical application as a singleton:
get_singleton{^} {
    {
        singleton2
    }[]
};
:expect_eq (get_singleton[] {foo}) undefined;
:expect_eq (get_singleton[] {^}) foo;

################################################################################
# Regression test: adding a new non-terminal while in a high-precedence state.
#
# A bug where newly added non-terminals were not factored into the decision to
# update the parser state led to the parser state being updated too early,
# changing the meaning of states which were currently on the parser stack.
#

(
    \\> new_non_terminal -> {foo} {(7 -> {bar})}
);

################################################################################
# Regression test: adding a new rule after evaluating a bang expression.
#
# A bug where the reduction for !<expr> did not properly update the set of
# precedences preventing the parser from adding new rules made it impossible to
# add new low-precedence rules afterwards.
#

!foo;
\\> custom1 -> { new_rule_after_bang } {(7 -> {foo})};
:expect_eq new_rule_after_bang foo;

.
