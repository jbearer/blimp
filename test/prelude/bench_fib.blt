import `std.lib`;
import `system.types`;

test_fib := (function [fib] {
    :expect ($fib(%0%) == %1%);
    :expect ($fib(%1%) == %1%);
    :expect ($fib(%2%) == %2%);
    :expect ($fib(%3%) == %3%);
    :expect ($fib(%4%) == %5%);
    :expect ($fib(%5%) == %8%);
    .
});

test_fib_native := (function [fib] {
    :expect ($fib(native_int 0) == (native_int 1));
    :expect ($fib(native_int 1) == (native_int 1));
    :expect ($fib(native_int 2) == (native_int 2));
    :expect ($fib(native_int 3) == (native_int 3));
    :expect ($fib(native_int 4) == (native_int 5));
    :expect ($fib(native_int 5) == (native_int 8));
    .
});

fib_rec{^} {^n
    if ((^n == %0%) or (^n == %1%)) {
        %1%
    } else {
        (fib_rec(^n - %1%)) + (fib_rec(^n - %2%))
    }
};

$test_fib[fib_rec];

fib_iter{^} {^n
    prev1_ref{^ ^};
    prev1 prev1_ref;

    prev2_ref{^ ^};
    prev2 prev2_ref;

    prev1_ref {%1%};
    prev2_ref {%1%};
    ^n times {
        {^prev2
            {^next
                prev1_ref {(^prev2)};
                prev2_ref {(^next)}
            } (prev1[] + ^prev2)
        } (prev2[])
    };

    prev1[]
};

$test_fib[fib_iter];

fib_native{^} {^n
    prev1_ref{^ ^};
    prev1 prev1_ref;

    prev2_ref{^ ^};
    prev2 prev2_ref;

    prev1_ref {native_int 1};
    prev2_ref {native_int 1};
    ^n times {
        {^prev2
            {^next
                prev1_ref {(^prev2)};
                prev2_ref {(^next)}
            } (prev1[] + ^prev2)
        } (prev2[])
    };

    prev1[]
};

$test_fib_native[fib_native];

:benchmark{n{^ 100}; fib_rec} {
    fib_rec(%9%)
};

:benchmark{n{^ 1000}; fib_iter} {
    fib_iter(%9%)
};

:benchmark{n{^ 1000}; fib_native} {
    fib_native(native_int 9)
};

.
