import std;

a := nil;
b := nil;
c := nil;

# Test a loop with some observable side-effects.
[a, b, c] each (function(sym) {
    $sym := $sym
});

# Verify the side-effects of the loop.
!expect_eq $a a;
!expect_eq $b b;
!expect_eq $c c;

# Verify the side-effects of the loop, using another loop.
[a, b, c] each (function(sym) {
    !expect_eq $($sym) $sym
});

# Test destructuring assignment.
[a, b, c] := [c, b, a];
!expect_eq $a c;
!expect_eq $b b;
!expect_eq $c a;

# Test length.
!expect([ ] length == 0);
!expect([a] length == 1);
!expect([a, b, c, d, e] length == 5);

# Test element access.
!expect_eq $([a, b, c]@0) a;
!expect_eq $([a, b, c]@1) b;
!expect_eq $([a, b, c]@2) c;

# Test element updates.
l := [a, b, c];
($l)@0 := c;
($l)@1 := b;
($l)@2 := a;
!expect_eq $(($l)@0) c;
!expect_eq $(($l)@1) b;
!expect_eq $(($l)@2) a;

# Test simultaneous element updates.
[(($l)@0), (($l)@1), (($l)@2)] := [($(($l)@2)), ($(($l)@1)), ($(($l)@0))];
!expect_eq $(($l)@0) a;
!expect_eq $(($l)@1) b;
!expect_eq $(($l)@2) c;

.
